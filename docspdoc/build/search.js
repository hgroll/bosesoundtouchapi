window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "__init__", "modulename": "__init__", "kind": "module", "doc": "<h1 class=\"modulename\">\nBose SoundTouch API Python3 Library\n</h1>\n\n<h2 id=\"overview\">Overview</h2>\n\n<p>This API provides Python programmers the ability to control Bose SoundTouch speakers from any program written in Python 3.</p>\n\n<p>It utilizes the Bose SoundTouch Webservices API, which is hosted on each SoundTouch device.</p>\n\n<p>More information about Bose SoundTouch speakers can be found on the <a href=\"https://www.boselatam.com/en_ar/products/speakers/smart_home/soundtouch_family.html\" target=\"_blank\">Bose SoundTouch Family page</a>.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<p>The following features are supported by this API.</p>\n\n<ul>\n<li>Media Player controls (play pause, resume, next track, prev track, repeat, shuffle, etc)</li>\n<li>Media Content (streaming radio, play http or https url, Google TTS)</li>\n<li>Media Volume control (set / retrieve, tick up / down, mute, smart mute)</li>\n<li>Select Sources (Aux, Bluetooth, Airplay, Deezer, Spotify, iHeart, SiriusXm, etc)</li>\n<li>Multi-room Zone functions (create zone, add / remove zone members, syncronized play)</li>\n<li>Power functions (smart power on / off, power toggle, power to standby)</li>\n<li>Bass Level (set, retrieve, supported min / max values)</li>\n<li>Presets (store, remove, remove all, select)</li>\n<li>Recent Media History (list recent content that was played, select recent item for play)</li>\n<li>Favorites (add, remove, thumbs up, thumbs down)</li>\n<li>Snapshot device settings (store, restore)</li>\n<li>Change Device Name</li>\n<li>Configuration data (clock time, clock, timezone, capabilities, bass capabilities)</li>\n<li>Notifications (receive real-time status updates from the device)</li>\n<li>ID3 tag support for media content played from a url</li>\n<li>... and more</li>\n</ul>\n\n<h2 id=\"requirements-and-dependencies\">Requirements and Dependencies</h2>\n\n<p>The following requirements must be met in order to utilize this API:</p>\n\n<ul>\n<li>Bose SoundTouch Speaker(s) that support the SoundTouch Webservices API.\n<ul>\n<li>SoundTouch 10</li>\n<li>SoundTouch 300</li>\n<li>I have only tested with the above (what can I say; Bose products are expensive, and I can only afford the two! :D )</li>\n<li>Other SoundTouch devices should be compatible.</li>\n<li>Note that the newer line of Bose Speakers (Home Speaker 500, 700, etc) are NOT supported as they do not utilize the Bose WebServices API.</li>\n</ul></li>\n</ul>\n\n<p>The following Python-related requirements must be met in order to utilize this API:</p>\n\n<ul>\n<li>Python 3.4 or greater (Python 2 not supported).</li>\n<li>smartinspectPython package (&gt;= 3.0.21) - for diagnostics and logging support.</li>\n<li>websocket-client package (&gt;= 2.0).</li>\n<li>urllib3 package (&gt;= 1.2.0).</li>\n</ul>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>Documentation is located in the package library under the 'docs' folder; use the index.html as your starting point. </p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>This module can be easily installed via pip:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>$<span class=\"w\"> </span>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>bosesoundtouchapi\n</code></pre>\n</div>\n\n<h2 id=\"quick-start-sample-code\">Quick-Start Sample Code</h2>\n\n<p>Almost every method is documented with sample code; just click on the \"Sample Code\" links under the method, and use the \"Copy to Clipboard\" functionality to copy / paste.</p>\n\n<p>Check out the following classes to get you started:</p>\n\n<ul>\n<li><code>bosesoundtouchapi.soundtouchclient.SoundTouchClient</code> - device controls and data gathering.  </li>\n<li><code>bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket</code> - web-socket notification support.  </li>\n</ul>\n\n<h2 id=\"licensing\">Licensing</h2>\n\n<p>This project is licensed and distributed under the terms of the MIT End-User License Agreement (EULA) license.</p>\n\n<p>Portions of this code and the overall \"flow\" were taken from contributions made by <a href=\"https://github.com/MatrixEditor\" target=\"_blank\">MatrixEditor</a>.  My original intent was to fork his repository and add some changes, but there were just too many and I wanted to change some things that would have broken backward compatibility so I continued with my own repository.  </p>\n\n<h2 id=\"logging-tracing-support\">Logging / Tracing Support</h2>\n\n<p>The SmartInspectPython package (installed with this package) can be used to easily debug your applications that utilize this API.</p>\n\n<p>The following topics and code samples will get you started on how to enable logging support. <br />\nNote that logging support can be turned on and off without changing code or restarting the application. <br />\nClick on the topics below to expand the section and reveal more information.  </p>\n\n<p><details>\n  <summary>Configure Logging Support Settings File</summary>\n  <br/>\n  Add the following lines to a new file (e.g. \"smartinspect.cfg\") in your application startup / test directory. <br />\n  Note the file name can be whatever you like, just specify it on the call to <code>SiAuto.Si.LoadConfiguration()</code> when initializing the logger.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\">; smartinspect.cfg</span>\n\n<span class=\"c1\">; SmartInspect Logging Configuration General settings.</span>\n<span class=\"c1\">; - &quot;Enabled&quot; parameter to turn logging on (True) or off (False).</span>\n<span class=\"c1\">; - &quot;Level&quot; parameter to control the logging level (Debug|Verbose|Message|Warning|Error).</span>\n<span class=\"c1\">; - &quot;AppName&quot; parameter to control the application name.</span>\n<span class=\"na\">Enabled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">False</span><span class=\"w\"> </span>\n<span class=\"na\">Level</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">Verbose</span>\n<span class=\"na\">DefaultLevel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">Debug</span>\n<span class=\"na\">AppName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">My Application Name</span>\n\n<span class=\"c1\">; SmartInspect Logging Configuration Output settings.</span>\n<span class=\"c1\">; - Log to SmartInspect Console Viewer running on the specified network address.</span>\n<span class=\"na\">Connections</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">tcp(host=192.168.1.1,port=4228,timeout=5000,reconnect=true,reconnect.interval=10s,async.enabled=true)</span>\n<span class=\"c1\">; - Log to a file, keeping 14 days worth of logs.</span>\n<span class=\"c1\">;Connections = &quot;file(filename=\\&quot;./tests/logfiles/logfile.log\\&quot;, rotate=daily, maxparts=14, append=true)&quot;</span>\n<span class=\"c1\">; - Log to an encrypted file, keeping 14 days worth of logs.</span>\n<span class=\"c1\">;Connections = &quot;file(filename=\\&quot;./tests/logfiles/logfileEncrypted.sil\\&quot;, encrypt=true, key=&quot;&quot;1234567890123456&quot;&quot;, rotate=daily, maxparts=14, append=true)&quot;</span>\n\n<span class=\"c1\">; set defaults for new sessions</span>\n<span class=\"c1\">; note that session defaults do not apply to the SiAuto.Main session, since</span>\n<span class=\"c1\">; this session was already added before a configuration file can be loaded. </span>\n<span class=\"c1\">; session defaults only apply to newly added sessions and do not affect existing sessions.</span>\n<span class=\"na\">SessionDefaults.Active</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">True</span>\n<span class=\"na\">SessionDefaults.Level</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">Message</span>\n<span class=\"na\">SessionDefaults.ColorBG</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">0xFFFFFF</span>\n\n<span class=\"c1\">; configure some individual session properties.</span>\n<span class=\"c1\">; note that this does not add the session to the sessionmanager; it simply</span>\n<span class=\"c1\">; sets the property values IF the session name already exists.</span>\n<span class=\"na\">Session.Main.Active</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">True</span>\n<span class=\"na\">Session.Main.ColorBG</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">0xFFFFFF</span>\n</code></pre>\n</div>\n\n<p></details></p>\n\n<p><details>\n  <summary>Initialize Logging Support, MAIN module</summary>\n  <br/>\n  Add the following lines to your program startup module. <br />\n  This will import the necessary package modules, and initialize logging support. <br />\n  NOTE - This code should only be executed one time!  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># load SmartInspect settings from a configuration settings file.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smartinspectpython.siauto</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">siConfigPath</span><span class=\"p\">:</span><span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;./tests/smartinspect.cfg&quot;</span>\n<span class=\"n\">SIAuto</span><span class=\"o\">.</span><span class=\"n\">Si</span><span class=\"o\">.</span><span class=\"n\">LoadConfiguration</span><span class=\"p\">(</span><span class=\"n\">siConfigPath</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># start monitoring the configuration file for changes, and reload it when it changes.</span>\n<span class=\"c1\"># this will check the file for changes every 60 seconds.</span>\n<span class=\"n\">siConfig</span><span class=\"p\">:</span><span class=\"n\">SIConfigurationTimer</span> <span class=\"o\">=</span> <span class=\"n\">SIConfigurationTimer</span><span class=\"p\">(</span><span class=\"n\">SIAuto</span><span class=\"o\">.</span><span class=\"n\">Si</span><span class=\"p\">,</span> <span class=\"n\">siConfigPath</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get smartinspect logger reference.</span>\n<span class=\"n\">_logsi</span><span class=\"p\">:</span><span class=\"n\">SISession</span> <span class=\"o\">=</span> <span class=\"n\">SIAuto</span><span class=\"o\">.</span><span class=\"n\">Main</span>\n\n<span class=\"c1\"># log system environment and application startup parameters.</span>\n<span class=\"n\">_logsi</span><span class=\"o\">.</span><span class=\"n\">LogSeparator</span><span class=\"p\">(</span><span class=\"n\">SILevel</span><span class=\"o\">.</span><span class=\"n\">Fatal</span><span class=\"p\">)</span>\n<span class=\"n\">_logsi</span><span class=\"o\">.</span><span class=\"n\">LogAppDomain</span><span class=\"p\">(</span><span class=\"n\">SILevel</span><span class=\"o\">.</span><span class=\"n\">Verbose</span><span class=\"p\">)</span>\n<span class=\"n\">_logsi</span><span class=\"o\">.</span><span class=\"n\">LogSystem</span><span class=\"p\">(</span><span class=\"n\">SILevel</span><span class=\"o\">.</span><span class=\"n\">Verbose</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p></details></p>\n\n<p><details>\n  <summary>Initialize Logging Support, CLASS or sub-modules</summary>\n  <br/>\n  Add the following lines to your program supporting modules. <br />\n  This will import the necessary package modules, and initialize the shared logging session.  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># get smartinspect logger reference.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smartinspectpython.siauto</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">_logsi</span><span class=\"p\">:</span><span class=\"n\">SISession</span> <span class=\"o\">=</span> <span class=\"n\">SIAuto</span><span class=\"o\">.</span><span class=\"n\">Main</span>\n</code></pre>\n</div>\n\n<p></details></p>\n\n<p><details>\n  <summary>More Information on SmartInspect</summary>\n  <br/>\n  You can use SmartInspectPython by itself to create log files for your own applications. <br />\n  Use the following PIP command to install the SmartInspectPython package from PyPi.org: <br />\n  <div class=\"pdoc-code codehilite\">\n  <pre><span></span><code>$<span class=\"w\"> </span>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>smartinspectpython\n  </code></pre>\n  </div></p>\n\n<p>The SmarrtInspect Redistributable Console Viewer (free) is required to view SmartInspect Log (.sil) formatted log files, as well capture packets via the TcpProtocol or PipeProtocol connections.  The Redistributable Console Viewer can be downloaded from the <a href=\"https://code-partners.com/offerings/smartinspect/releases/\" target=\"_blank\">Code-Partners Software Downloads Page</a>. Note that the \"Redistributable Console Viewer\" is a free product, while the \"SmartInspect Full Setup\" is the Professional level viewer that adds a few more bells and whistles for a fee.  Also note that a Console Viewer is NOT required to view plain text (non .sil) formatted log files.\n</details></p>\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are <strong>greatly appreciated</strong>.</p>\n\n<p>If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\".</p>\n\n<ol>\n<li>Fork the Project</li>\n<li>Create your Feature Branch  <code>git checkout -b feature/AmazingFeature</code></li>\n<li>Commit your Changes  <code>git commit -m 'Add some AmazingFeature'</code></li>\n<li>Push to the Branch  <code>git push origin feature/AmazingFeature</code></li>\n<li>Open a Pull Request</li>\n</ol>\n\n<hr />\n\n<p><details>\n  <summary>View Change Log</summary></p>\n\n<h2 id=\"change-log\">Change Log</h2>\n\n<p>All notable changes to this project are listed here.\nDetailed changes are listed in the module where the change was made.</p>\n\n<p>Change are listed in reverse chronological order (newest to oldest).</p>\n\n<p><span class=\"changelog\"></p>\n\n<h6 id=\"103-20231030\">[ 1.0.3 ] - 2023/10/30</h6>\n\n<ul>\n<li>Updated SoundTouchClient <code>PlayUrl</code> method to handle metadata retrieval errors more gracefully.</li>\n</ul>\n\n<h6 id=\"102-20231028\">[ 1.0.2 ] - 2023/10/28</h6>\n\n<ul>\n<li>Updated documentation link for PyPi.org.</li>\n</ul>\n\n<h6 id=\"101-20231028\">[ 1.0.1 ] - 2023/10/28</h6>\n\n<ul>\n<li>Added support for ReadtheDocs documentation hosting.</li>\n</ul>\n\n<h6 id=\"100-20231005\">[ 1.0.0 ] - 2023/10/05</h6>\n\n<ul>\n<li>Version 1 initial release.</li>\n</ul>\n\n<p></span>\n</details></p>\n"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "kind": "module", "doc": "<p>The <code>firmware</code> namespace contains classes related to the Bose SoundTouch\nFirmware update process.</p>\n"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.BOSE_ST_INDEX_URL", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "BOSE_ST_INDEX_URL", "kind": "variable", "doc": "<p>To fetch the Bose SoundTouch index.xml file this URL has to be visited.</p>\n", "default_value": "&#x27;https://downloads.bose.com/updates/soundtouch&#x27;"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware", "kind": "class", "doc": "<p>A class that targets a specific Bose SoundTouch firmware upgrade.</p>\n\n<p>The specific information can be loaded from an XML-Element (ElementTree.Element).\nThere is a static method that implements the parsing process to save the values\nstored in the XML-Element.</p>\n"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.__init__", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>deviceId (str):</strong>  A Bose-specific device id for this hardware object.</li>\n<li><strong>productName (str):</strong>  Product name for the linked firmware.</li>\n<li><strong>revision (str):</strong>  The revision number of the current release.</li>\n<li><strong>release (SoundTouchFirmwareRelease):</strong>  The linked firmware release.</li>\n<li><strong>protocols (list[str]):</strong>  If there are specific platform targets, some protocols are added to the\nhardware object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">deviceId</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">productName</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">revision</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">release</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">firmware</span><span class=\"o\">.</span><span class=\"n\">soundtouchfirmwarerelease</span><span class=\"o\">.</span><span class=\"n\">SoundTouchFirmwareRelease</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">protocols</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.DeviceId", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.DeviceId", "kind": "variable", "doc": "<p>A Bose-specific device id for this hardware object.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.ProductName", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.ProductName", "kind": "variable", "doc": "<p>Product name for the linked firmware.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.Protocols", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.Protocols", "kind": "variable", "doc": "<p>If there are specific platform targets, some protocols are added to the\nhardware object.</p>\n", "annotation": ": list"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.Release", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.Release", "kind": "variable", "doc": "<p>The linked firmware release.</p>\n", "annotation": ": bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.Revision", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.Revision", "kind": "variable", "doc": "<p>The revision number of the current release.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.LoadFromXmlElement", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.LoadFromXmlElement", "kind": "function", "doc": "<p>Creates a new <code>SoundTouchFirmware</code> instance from an xml element that\ncontains firmware details.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>element (xmltree.Element):</strong>  The root element</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>SoundTouchFirmware</code> object that contains the parsed firmware details.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>   If the element argument is null.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">firmware</span><span class=\"o\">.</span><span class=\"n\">soundtouchfirmware</span><span class=\"o\">.</span><span class=\"n\">SoundTouchFirmware</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.LoadIndex", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.LoadIndex", "kind": "function", "doc": "<p>Loads an XML-Element into a list of <code>SoundTouchFirmware</code> objects.</p>\n\n<p>This method can be called after fetching the index.xml file for a firmware\nrelease.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (xmltree.Element):</strong>  The xml root-element for the index file.</li>\n</ul>\n\n<p>Returns: <br />\n    A list of parsed firmware releases.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmware.SoundTouchFirmware.ToString", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmware", "qualname": "SoundTouchFirmware.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct", "kind": "class", "doc": "<p>A class storing the product id and the linked URL where the firmware\ncan be downloaded.</p>\n"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct.__init__", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>productId (int):</strong>  The product id given by Bose.</li>\n<li><strong>indexUrl (str):</strong>  Specifies where the index.xml file is located. <br />\nUse the XML-Document stored at this link as the parameter in <code>LoadIndex</code> method.</li>\n<li><strong>deviceClass (str):</strong>  Some products have a special device class added to their entry. (Usage unknown)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">productId</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">indexUrl</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">deviceClass</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct.DeviceClass", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct.DeviceClass", "kind": "variable", "doc": "<p>Some products have a special device class added to their entry. (Usage unknown)</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct.HasDeviceClass", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct.HasDeviceClass", "kind": "variable", "doc": "<p>Returns whether this product stores a device class (True) or not (False).</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct.IndexUrl", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct.IndexUrl", "kind": "variable", "doc": "<p>Specifies where the index.xml file is located.  </p>\n\n<p>Use the XML-Document stored at this link as the parameter in <code>LoadIndex</code> method.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct.ProductId", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct.ProductId", "kind": "variable", "doc": "<p>The product id given by Bose.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct.LoadFromXmlElement", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct.LoadFromXmlElement", "kind": "function", "doc": "<p>Creates a new <code>SoundTouchFirmwareProduct</code> instance from an xml element that\ncontains firmware product details.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>element (xmltree.Element):</strong>  The root element</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>SoundTouchFirmwareProduct</code> object that contains the parsed firmware \n  product details.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>   If the element argument is null.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">firmware</span><span class=\"o\">.</span><span class=\"n\">soundtouchfirmwareproduct</span><span class=\"o\">.</span><span class=\"n\">SoundTouchFirmwareProduct</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct.LoadLookupXml", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct.LoadLookupXml", "kind": "function", "doc": "<p>Loads a XML-Element into a list of <code>SoundTouchFirmwareProduct</code> objects.</p>\n\n<p>This method can be called after fetching the lookup.xml file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (xmltree.Element):</strong>  The xml root-element for the lookup file.</li>\n</ul>\n\n<p>Returns: <br />\n    A list of parsed products.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct.SoundTouchFirmwareProduct.ToString", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwareproduct", "qualname": "SoundTouchFirmwareProduct.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease", "kind": "class", "doc": "<p>A Bose SoundTouch release targets a specific firmware upgrade.</p>\n\n<p>The specific information can be loaded from an XML-Element (ElementTree.Element).\nThere is a static method that implements the parsing process to save the values\nstored in the XML-Element.</p>\n"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.__init__", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>revision (str):</strong>  The revision number of the current release.</li>\n<li><strong>host (str):</strong>  The hostname of the update provider.</li>\n<li><strong>uri (str):</strong>  The uri part of the full url linked to the downloadable update file.</li>\n<li><strong>usbUri (str):</strong>  Another uri which was not usable in any context.</li>\n<li><strong>image (dict[str, str]):</strong>  The main property storing data related to the firmware image.</li>\n<li><strong>notesUrl (str):</strong>  If the update file contains some release notes, the url is given within this property.</li>\n<li><strong>features (list[dict[str, str]]):</strong>  If there are some features within the release, they are added to this list as a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">revision</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">usbUri</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">notesUrl</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.Features", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.Features", "kind": "variable", "doc": "<p>If there are some features within the release, they are added to this list as a dict.</p>\n", "annotation": ": list"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.Host", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.Host", "kind": "variable", "doc": "<p>Hostname of the update provider.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.Image", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.Image", "kind": "variable", "doc": "<p>Main property storing data related to the firmware image.</p>\n", "annotation": ": dict"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.NotesUrl", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.NotesUrl", "kind": "variable", "doc": "<p>If the update file contains some release notes, the URL is given within this property.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.Revision", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.Revision", "kind": "variable", "doc": "<p>Revision number of the current release.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.Uri", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.Uri", "kind": "variable", "doc": "<p>URI part of the full URL linked to the downloadable update file.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.UsbUri", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.UsbUri", "kind": "variable", "doc": "<p>Another URI which was not usable in any context.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.LoadFromXmlElement", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.LoadFromXmlElement", "kind": "function", "doc": "<p>Creates a new <code>SoundTouchFirmwareRelease</code> instance from an xml element that\ncontains firmware details.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>element (xmltree.Element):</strong>  The root element with the tag \"RELEASE\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>SoundTouchFirmwareRelease</code> object that contains the parsed firmware\n  release details.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>   If the element argument is null.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">firmware</span><span class=\"o\">.</span><span class=\"n\">soundtouchfirmwarerelease</span><span class=\"o\">.</span><span class=\"n\">SoundTouchFirmwareRelease</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease.SoundTouchFirmwareRelease.ToString", "modulename": "bosesoundtouchapi.firmware.soundtouchfirmwarerelease", "qualname": "SoundTouchFirmwareRelease.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.balance", "modulename": "bosesoundtouchapi.models.balance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.balance.Balance", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance", "kind": "class", "doc": "<p>SoundTouch device Balance configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \nbalance configuration of the device.</p>\n", "bases": "bosesoundtouchapi.soundtouchmodelrequest.SoundTouchModelRequest"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.__init__", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>actual (int):</strong>  The actual value of the balance level.</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.Actual", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.Actual", "kind": "variable", "doc": "<p>The actual value of the balance level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.Default", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.Default", "kind": "variable", "doc": "<p>The default value of the balance level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.DeviceId", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.DeviceId", "kind": "variable", "doc": "<p>The Device identifier.</p>\n"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.IsAvailable", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.IsAvailable", "kind": "variable", "doc": "<p>True, if a balance confiiguration can be altered; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.Maximum", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.Maximum", "kind": "variable", "doc": "<p>The maximum allowed value of the balance level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.Minimum", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.Minimum", "kind": "variable", "doc": "<p>The minimum allowed value of the balance level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.Target", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.Target", "kind": "variable", "doc": "<p>The targeted value of the balance level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.ToString", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.balance.Balance.ToXmlRequestBody", "modulename": "bosesoundtouchapi.models.balance", "qualname": "Balance.ToXmlRequestBody", "kind": "function", "doc": "<p>Overridden.\nReturns a POST request body for changing the balance level. </p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An xml string that can be used in a POST request to update the\n  device configuration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.bass", "modulename": "bosesoundtouchapi.models.bass", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.bass.Bass", "modulename": "bosesoundtouchapi.models.bass", "qualname": "Bass", "kind": "class", "doc": "<p>SoundTouch device Bass configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \nbass configuration of the device.</p>\n", "bases": "bosesoundtouchapi.soundtouchmodelrequest.SoundTouchModelRequest"}, {"fullname": "bosesoundtouchapi.models.bass.Bass.__init__", "modulename": "bosesoundtouchapi.models.bass", "qualname": "Bass.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>actual (int):</strong>  The actual value of the bass level.</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.bass.Bass.Actual", "modulename": "bosesoundtouchapi.models.bass", "qualname": "Bass.Actual", "kind": "variable", "doc": "<p>The actual value of the bass level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.bass.Bass.Target", "modulename": "bosesoundtouchapi.models.bass", "qualname": "Bass.Target", "kind": "variable", "doc": "<p>The targeted value of the bass level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.bass.Bass.ToString", "modulename": "bosesoundtouchapi.models.bass", "qualname": "Bass.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.bass.Bass.ToXmlRequestBody", "modulename": "bosesoundtouchapi.models.bass", "qualname": "Bass.ToXmlRequestBody", "kind": "function", "doc": "<p>Overridden.\nReturns a POST request body for changing the bass level. </p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An xml string that can be used in a POST request to update the\n  device configuration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.basscapabilities", "modulename": "bosesoundtouchapi.models.basscapabilities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.basscapabilities.BassCapabilities", "modulename": "bosesoundtouchapi.models.basscapabilities", "qualname": "BassCapabilities", "kind": "class", "doc": "<p>SoundTouch device BassCapabilities configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \nbass capabilities configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.basscapabilities.BassCapabilities.__init__", "modulename": "bosesoundtouchapi.models.basscapabilities", "qualname": "BassCapabilities.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.basscapabilities.BassCapabilities.Default", "modulename": "bosesoundtouchapi.models.basscapabilities", "qualname": "BassCapabilities.Default", "kind": "variable", "doc": "<p>The default value of the bass level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.basscapabilities.BassCapabilities.IsAvailable", "modulename": "bosesoundtouchapi.models.basscapabilities", "qualname": "BassCapabilities.IsAvailable", "kind": "variable", "doc": "<p>Returns whether bass capabilities are enabled on the device.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.basscapabilities.BassCapabilities.Maximum", "modulename": "bosesoundtouchapi.models.basscapabilities", "qualname": "BassCapabilities.Maximum", "kind": "variable", "doc": "<p>The maximum allowed value of the bass level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.basscapabilities.BassCapabilities.Minimum", "modulename": "bosesoundtouchapi.models.basscapabilities", "qualname": "BassCapabilities.Minimum", "kind": "variable", "doc": "<p>The minimum allowed value of the bass level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.basscapabilities.BassCapabilities.ToString", "modulename": "bosesoundtouchapi.models.basscapabilities", "qualname": "BassCapabilities.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.capabilities", "modulename": "bosesoundtouchapi.models.capabilities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities", "kind": "class", "doc": "<p>SoundTouch device Capabilities configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \ncapabilities configuration of the device.      </p>\n\n<p>This class contains important configuration values, such as <code>IsWebSocketApiProxyCapable</code>\nwhich indicates whether the WebSocket notification API can be used.</p>\n\n<p>Next, a capabilities object shows whether a clock display is available\nor if the device can run in dual Mode.  Each device comes with different\nadditional features, which are also stored in this class with a dict-like\nimplementation with the following mapping: <code>self[cap.name] = cap.url</code>.</p>\n"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.__init__", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.DeviceId", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.DeviceId", "kind": "variable", "doc": "<p>Device identifier.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.IsBcoResetCapable", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.IsBcoResetCapable", "kind": "variable", "doc": "<p>Returns whether the device contains a Bose coreset.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.IsClockDisplayCapable", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.IsClockDisplayCapable", "kind": "variable", "doc": "<p>Returns whether the clock display is available.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.IsDisablePowerSavingCapable", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.IsDisablePowerSavingCapable", "kind": "variable", "doc": "<p>Returns whether the power saving mode can be disabled.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.IsDualModeCapable", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.IsDualModeCapable", "kind": "variable", "doc": "<p>Returns whether the device can run in dual mode.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.IsLightSwitchCapable", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.IsLightSwitchCapable", "kind": "variable", "doc": "<p>Returns whether the light switch can be used.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.IsLrStereoCapable", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.IsLrStereoCapable", "kind": "variable", "doc": "<p>Returns whether the device is left-right stereo capable.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.IsWebSocketApiProxyCapable", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.IsWebSocketApiProxyCapable", "kind": "variable", "doc": "<p>Returns whether the WebSocket API can be used on port 8080.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.capabilities.Capabilities.ToString", "modulename": "bosesoundtouchapi.models.capabilities", "qualname": "Capabilities.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.clockconfig", "modulename": "bosesoundtouchapi.models.clockconfig", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig", "kind": "class", "doc": "<p>SoundTouch device ClockConfig configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \nclock configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig.__init__", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig.BrightnessLevel", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig.BrightnessLevel", "kind": "variable", "doc": "<p>The brightness level of the clock display.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig.TimeFormat", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig.TimeFormat", "kind": "variable", "doc": "<p>The time format with the following form: <code>TIME_FORMAT_xxHOUR_ID</code> (e.g. <br />\n\"TIME_FORMAT_12HOUR_ID\", \"TIME_FORMAT_24HOUR_ID\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig.TimeZoneInfo", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig.TimeZoneInfo", "kind": "variable", "doc": "<p>The device's timezone.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig.UserEnable", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig.UserEnable", "kind": "variable", "doc": "<p>A value indicating whether the timezone can be altered by a user.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig.UserOffsetMinute", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig.UserOffsetMinute", "kind": "variable", "doc": "<p>The offset in relation to the utc time.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig.UserUtcTime", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig.UserUtcTime", "kind": "variable", "doc": "<p>The current utc time.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clockconfig.ClockConfig.ToString", "modulename": "bosesoundtouchapi.models.clockconfig", "qualname": "ClockConfig.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.clocktime", "modulename": "bosesoundtouchapi.models.clocktime", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime", "kind": "class", "doc": "<p>SoundTouch device ClockTime configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \nclock time configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.__init__", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.Brightness", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.Brightness", "kind": "variable", "doc": "<p>The brightness level of the clock display.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.ClockError", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.ClockError", "kind": "variable", "doc": "<p>TODO - document this property.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.CueMusic", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.CueMusic", "kind": "variable", "doc": "<p>TODO - document this property.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.Day", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.Day", "kind": "variable", "doc": "<p>The day (of month) portion of the local time value.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.DayOfWeek", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.DayOfWeek", "kind": "variable", "doc": "<p>The day of week portion of the local time value.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.Hour", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.Hour", "kind": "variable", "doc": "<p>The hour portion of the local time value.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.Minute", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.Minute", "kind": "variable", "doc": "<p>The minute portion of the local time value.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.Month", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.Month", "kind": "variable", "doc": "<p>The month portion of the local time value.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.Second", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.Second", "kind": "variable", "doc": "<p>The second portion of the local time value.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.TimeFormat", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.TimeFormat", "kind": "variable", "doc": "<p>The time format with the following form: <code>TIME_FORMAT_xxHOUR_ID</code> (e.g. <br />\n\"TIME_FORMAT_12HOUR_ID\", \"TIME_FORMAT_24HOUR_ID\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.UtcSyncTime", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.UtcSyncTime", "kind": "variable", "doc": "<p>Date and time (in epoch format) of when the device last syncronized its datetime.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.UtcTime", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.UtcTime", "kind": "variable", "doc": "<p>Current UTC Date and time (in epoch format) of the device.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.Year", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.Year", "kind": "variable", "doc": "<p>The year portion of the local time value.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.clocktime.ClockTime.ToString", "modulename": "bosesoundtouchapi.models.clocktime", "qualname": "ClockTime.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.contentitem", "modulename": "bosesoundtouchapi.models.contentitem", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem", "kind": "class", "doc": "<p>SoundTouch device ContentItem configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \ncontent item (e.g. media source) configuration of the device.  </p>\n\n<p>Instances of this class can be used to switch the input source of media.</p>\n"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.__init__", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>source (str):</strong>  source input.</li>\n<li><strong>itemType (str):</strong>  type of item.</li>\n<li><strong>location (str):</strong>  a direct link to the media (if present).</li>\n<li><strong>sourceAccount (str):</strong>  source account this content item is played with.</li>\n<li><strong>isPresetable (bool):</strong>  true if this item can be saved as a Preset; otherwise, false.</li>\n<li><strong>name (str):</strong>  item name (if present).</li>\n<li>containerArt (str)\na url link to the container art (if present).</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">itemType</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sourceAccount</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">isPresetable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">containerArt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.ContainerArt", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.ContainerArt", "kind": "variable", "doc": "<p>The item's container art url.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.IsPresetable", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.IsPresetable", "kind": "variable", "doc": "<p>Returns True if the content item can be saved as a Preset; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.ItemType", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.ItemType", "kind": "variable", "doc": "<p>Specifies the type of this item.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.Location", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.Location", "kind": "variable", "doc": "<p>If present, a direct link to the media.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.Name", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.Name", "kind": "variable", "doc": "<p>The item's name.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.Source", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.Source", "kind": "variable", "doc": "<p>The media source type. \nThis value is defined at <code>bosesoundtouchapi.soundtouchsource.SoundTouchSources</code>.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.SourceAccount", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.SourceAccount", "kind": "variable", "doc": "<p>The source account this content item is played with.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.ToElement", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.ToString", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.contentitem.ContentItem.ToXmlString", "modulename": "bosesoundtouchapi.models.contentitem", "qualname": "ContentItem.ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.dspmonostereoitem", "modulename": "bosesoundtouchapi.models.dspmonostereoitem", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.dspmonostereoitem.DSPMonoStereoItem", "modulename": "bosesoundtouchapi.models.dspmonostereoitem", "qualname": "DSPMonoStereoItem", "kind": "class", "doc": "<p>SoundTouch device DSPMonoStereoItem configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \nDSP mono / stereo configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.dspmonostereoitem.DSPMonoStereoItem.__init__", "modulename": "bosesoundtouchapi.models.dspmonostereoitem", "qualname": "DSPMonoStereoItem.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.dspmonostereoitem.DSPMonoStereoItem.DeviceId", "modulename": "bosesoundtouchapi.models.dspmonostereoitem", "qualname": "DSPMonoStereoItem.DeviceId", "kind": "variable", "doc": "<p>Device identifier.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.dspmonostereoitem.DSPMonoStereoItem.IsMonoEnabled", "modulename": "bosesoundtouchapi.models.dspmonostereoitem", "qualname": "DSPMonoStereoItem.IsMonoEnabled", "kind": "variable", "doc": "<p>True if monophonic audio (audio from one single source) is enabled; otherwise, False\nto indicate stereophonic audio is enabled, which present the image of a 'left' and \n'right' in the audio feed.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.dspmonostereoitem.DSPMonoStereoItem.ToString", "modulename": "bosesoundtouchapi.models.dspmonostereoitem", "qualname": "DSPMonoStereoItem.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.infonetworkconfig", "modulename": "bosesoundtouchapi.models.infonetworkconfig", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.infonetworkconfig.InfoNetworkConfig", "modulename": "bosesoundtouchapi.models.infonetworkconfig", "qualname": "InfoNetworkConfig", "kind": "class", "doc": "<p>SoundTouch device InfoNetworkConfig configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the \nnet connected interfaces configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.infonetworkconfig.InfoNetworkConfig.__init__", "modulename": "bosesoundtouchapi.models.infonetworkconfig", "qualname": "InfoNetworkConfig.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.infonetworkconfig.InfoNetworkConfig.mac_address", "modulename": "bosesoundtouchapi.models.infonetworkconfig", "qualname": "InfoNetworkConfig.mac_address", "kind": "variable", "doc": "<p>The device's mac address.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.infonetworkconfig.InfoNetworkConfig.type_item", "modulename": "bosesoundtouchapi.models.infonetworkconfig", "qualname": "InfoNetworkConfig.type_item", "kind": "variable", "doc": "<p>The adapter type (WIFI or ETHERNET).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.infonetworkconfig.InfoNetworkConfig.ip_address", "modulename": "bosesoundtouchapi.models.infonetworkconfig", "qualname": "InfoNetworkConfig.ip_address", "kind": "variable", "doc": "<p>The mapped ip address.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.infonetworkconfig.InfoNetworkConfig.toString", "modulename": "bosesoundtouchapi.models.infonetworkconfig", "qualname": "InfoNetworkConfig.toString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.mediaserver", "modulename": "bosesoundtouchapi.models.mediaserver", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer", "kind": "class", "doc": "<p>SoundTouch device MediaServer configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nsingle UPnP media server configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.__init__", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.FriendlyName", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.FriendlyName", "kind": "variable", "doc": "<p>The friendly name of the media server (e.g. \"Home (Home Assistant)\", \"Hue Bridge\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.IpAddress", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.IpAddress", "kind": "variable", "doc": "<p>The IPV4 address assigned to the media server by the network.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.Location", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.Location", "kind": "variable", "doc": "<p>The url location of the media server (e.g. \"http://192.168.1.248:40000/device.xml\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.MacAddress", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.MacAddress", "kind": "variable", "doc": "<p>The MAC address (media access control address) assigned to the media server.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.Manufacturer", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.Manufacturer", "kind": "variable", "doc": "<p>The manufacturer of the media server (e.g. \"Home Assistant\", \"Signify\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.ModelDescription", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.ModelDescription", "kind": "variable", "doc": "<p>The model description of the media server (e.g. \"Philips hue Personal Wireless Lighting\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.ModelName", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.ModelName", "kind": "variable", "doc": "<p>The model name of the media server (e.g. \"Home Assistant OS\", \"Philipss Hue Bridge\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.ServerId", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.ServerId", "kind": "variable", "doc": "<p>Globally unique identifier (guid) of the media server.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.mediaserver.MediaServer.ToString", "modulename": "bosesoundtouchapi.models.mediaserver", "qualname": "MediaServer.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.mediaserverlist", "modulename": "bosesoundtouchapi.models.mediaserverlist", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.mediaserverlist.MediaServerList", "modulename": "bosesoundtouchapi.models.mediaserverlist", "qualname": "MediaServerList", "kind": "class", "doc": "<p>SoundTouch device MediaServerList configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nUPnP media server configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.mediaserverlist.MediaServerList.__init__", "modulename": "bosesoundtouchapi.models.mediaserverlist", "qualname": "MediaServerList.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.mediaserverlist.MediaServerList.append", "modulename": "bosesoundtouchapi.models.mediaserverlist", "qualname": "MediaServerList.append", "kind": "function", "doc": "<p>Append a new <code>MediaServer</code> item to the list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  The <code>MediaServer</code> object to append.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">mediaserver</span><span class=\"o\">.</span><span class=\"n\">MediaServer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.mediaserverlist.MediaServerList.ToString", "modulename": "bosesoundtouchapi.models.mediaserverlist", "qualname": "MediaServerList.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.networkinfo", "modulename": "bosesoundtouchapi.models.networkinfo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfo.NetworkInfo", "modulename": "bosesoundtouchapi.models.networkinfo", "qualname": "NetworkInfo", "kind": "class", "doc": "<p>SoundTouch device NetworkInfo configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nnetwork information configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfo.NetworkInfo.__init__", "modulename": "bosesoundtouchapi.models.networkinfo", "qualname": "NetworkInfo.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.networkinfo.NetworkInfo.InterfaceCount", "modulename": "bosesoundtouchapi.models.networkinfo", "qualname": "NetworkInfo.InterfaceCount", "kind": "variable", "doc": "<p>The total number of network interfaces defined, including both\nwired and wireless.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.networkinfo.NetworkInfo.WifiProfileCount", "modulename": "bosesoundtouchapi.models.networkinfo", "qualname": "NetworkInfo.WifiProfileCount", "kind": "variable", "doc": "<p>The number of wireless (wifi) network interfaces defined.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.networkinfo.NetworkInfo.append", "modulename": "bosesoundtouchapi.models.networkinfo", "qualname": "NetworkInfo.append", "kind": "function", "doc": "<p>Append a new <code>NetworkInfoInterface</code> item to the list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  The <code>NetworkInfoInterface</code> object to append.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">networkinfointerface</span><span class=\"o\">.</span><span class=\"n\">NetworkInfoInterface</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.networkinfo.NetworkInfo.ToString", "modulename": "bosesoundtouchapi.models.networkinfo", "qualname": "NetworkInfo.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface", "modulename": "bosesoundtouchapi.models.networkinfointerface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface", "kind": "class", "doc": "<p>SoundTouch device NetworkInfoInterface configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nsingle network information interface configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.__init__", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.FrequencyKhz", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.FrequencyKhz", "kind": "variable", "doc": "<p>The frequency (in KiloHertz) the network uses to communicate with a \nwireless router (e.g. 2452000 = 2.4GHz, etc).</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.InterfaceType", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.InterfaceType", "kind": "variable", "doc": "<p>The type of interface (e.g. \"WIFI_INTERFACE\", \"ETHERNET_INTERFACE\", etc).</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.IpAddress", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.IpAddress", "kind": "variable", "doc": "<p>The IPV4 address assigned to the device by the network.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.MacAddress", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.MacAddress", "kind": "variable", "doc": "<p>The MAC address (media access control address) assigned to the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.Mode", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.Mode", "kind": "variable", "doc": "<p>? - TODO define this property.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.Name", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.Name", "kind": "variable", "doc": "<p>The network interface name (e.g. \"wlan0\", \"eth0\", etc).</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.Signal", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.Signal", "kind": "variable", "doc": "<p>The network signal status indicator (e.g. \"EXCELLENT_SIGNAL\", \"POOR_SIGNAL\", etc).</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.Ssid", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.Ssid", "kind": "variable", "doc": "<p>The network service set identifier (SSID) the device is connected to.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.State", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.State", "kind": "variable", "doc": "<p>The state of the network connection (e.g. \"NETWORK_WIFI_CONNECTED\", \n\"NETWORK_WIFI_DISCONNECTED\", \"NETWORK_ETHERNET_DISCONNECTED\", etc).</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkinfointerface.NetworkInfoInterface.ToString", "modulename": "bosesoundtouchapi.models.networkinfointerface", "qualname": "NetworkInfoInterface.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.networkstatus", "modulename": "bosesoundtouchapi.models.networkstatus", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.networkstatus.NetworkStatus", "modulename": "bosesoundtouchapi.models.networkstatus", "qualname": "NetworkStatus", "kind": "class", "doc": "<p>SoundTouch device NetworkStatus configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nnetwork status configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkstatus.NetworkStatus.__init__", "modulename": "bosesoundtouchapi.models.networkstatus", "qualname": "NetworkStatus.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.networkstatus.NetworkStatus.DeviceId", "modulename": "bosesoundtouchapi.models.networkstatus", "qualname": "NetworkStatus.DeviceId", "kind": "variable", "doc": "<p>The device identifier, as assigned by the manufacturer.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkstatus.NetworkStatus.InterfaceCount", "modulename": "bosesoundtouchapi.models.networkstatus", "qualname": "NetworkStatus.InterfaceCount", "kind": "variable", "doc": "<p>The total number of network interfaces defined, including both\nwired and wireless.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.networkstatus.NetworkStatus.SerialNumber", "modulename": "bosesoundtouchapi.models.networkstatus", "qualname": "NetworkStatus.SerialNumber", "kind": "variable", "doc": "<p>The device serial number, as assigned by the manufacturer.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkstatus.NetworkStatus.append", "modulename": "bosesoundtouchapi.models.networkstatus", "qualname": "NetworkStatus.append", "kind": "function", "doc": "<p>Append a new <code>NetworkStatusInterface</code> item to the list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  The <code>NetworkStatusInterface</code> object to append.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">networkstatusinterface</span><span class=\"o\">.</span><span class=\"n\">NetworkStatusInterface</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.networkstatus.NetworkStatus.ToString", "modulename": "bosesoundtouchapi.models.networkstatus", "qualname": "NetworkStatus.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface", "kind": "class", "doc": "<p>SoundTouch device NetworkStatusInterface configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nsingle network interface configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.__init__", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.FrequencyKhz", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.FrequencyKhz", "kind": "variable", "doc": "<p>The frequency (in KiloHertz) the network uses to communicate with a \nwireless router (e.g. 2452000 = 2.4GHz, etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.IsRunning", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.IsRunning", "kind": "variable", "doc": "<p>True if the network connection is active; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.Kind", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.Kind", "kind": "variable", "doc": "<p>The kind of network connection that is established (e.g. \"Wired\", \"Wireless\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.MacAddress", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.MacAddress", "kind": "variable", "doc": "<p>The MAC address (media access control address) assigned to the device.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.Name", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.Name", "kind": "variable", "doc": "<p>Network interface name (e.g. \"etho0\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.Rssi", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.Rssi", "kind": "variable", "doc": "<p>Received Signal Strength Indicator status of the network connection (e.g. \"good\", etc). <br />\nThis is a measurement of how well your device can receive a wireless\nnetwork signal, and determines how good the wireless connection is.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.Ssid", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.Ssid", "kind": "variable", "doc": "<p>The network service set identifier (SSID) the device is connected to.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.networkstatusinterface.NetworkStatusInterface.ToString", "modulename": "bosesoundtouchapi.models.networkstatusinterface", "qualname": "NetworkStatusInterface.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.powermanagement", "modulename": "bosesoundtouchapi.models.powermanagement", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.powermanagement.PowerManagement", "modulename": "bosesoundtouchapi.models.powermanagement", "qualname": "PowerManagement", "kind": "class", "doc": "<p>SoundTouch device PowerManagement configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\npower management status configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.powermanagement.PowerManagement.__init__", "modulename": "bosesoundtouchapi.models.powermanagement", "qualname": "PowerManagement.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.powermanagement.PowerManagement.BatteryCapable", "modulename": "bosesoundtouchapi.models.powermanagement", "qualname": "PowerManagement.BatteryCapable", "kind": "variable", "doc": "<p>True if the device is capable of being powered via a battery; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.powermanagement.PowerManagement.State", "modulename": "bosesoundtouchapi.models.powermanagement", "qualname": "PowerManagement.State", "kind": "variable", "doc": "<p>Current state of the power supplied (e.g. \"FullPower\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.powermanagement.PowerManagement.ToString", "modulename": "bosesoundtouchapi.models.powermanagement", "qualname": "PowerManagement.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.preset", "modulename": "bosesoundtouchapi.models.preset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.preset.Preset", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset", "kind": "class", "doc": "<p>SoundTouch device Preset configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nsingle preset configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.__init__", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>presetId (int):</strong>  Preset identifier; valid values are 1 thru 6.</li>\n<li><strong>createdOn (int):</strong>  Date time (in epoch format) the preset was created; \nthe current epoch time is used if the value is zero or None.</li>\n<li><strong>updatedOn (int):</strong>  Date time (in epoch format) the preset was last updated;\nthe current epoch time is used if the value is zero or None.</li>\n<li><strong>source (str):</strong>  ContentItem node source value.</li>\n<li><strong>typeValue (str):</strong>  ContentItem node type value.</li>\n<li><strong>location (str):</strong>  ContentItem node location value.</li>\n<li><strong>sourceAccount (str):</strong>  ContentItem node sourceAccount value.</li>\n<li><strong>isPresetable (bool):</strong>  ContentItem node isPresetable value.</li>\n<li><strong>name (str):</strong>  ContentItem node itemName value.</li>\n<li>containerArt (str)\nContentItem node containerArt value.</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">presetId</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">createdOn</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">updatedOn</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typeValue</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sourceAccount</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">isPresetable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">containerArt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.CreatedOn", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.CreatedOn", "kind": "variable", "doc": "<p>Date and time (in epoch format) of when the preset was created.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.ContainerArt", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.ContainerArt", "kind": "variable", "doc": "<p>The content item's container art url.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.IsPresetable", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.IsPresetable", "kind": "variable", "doc": "<p>Returns True if the content item can be saved as a Preset; otherwise, False.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.ItemType", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.ItemType", "kind": "variable", "doc": "<p>Specifies the type of the content item.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.Location", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.Location", "kind": "variable", "doc": "<p>If present, the content item's direct link to the media.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.Name", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.Name", "kind": "variable", "doc": "<p>The content item's name.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.PresetId", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.PresetId", "kind": "variable", "doc": "<p>The preset identifier (1 - 6).</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.Source", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.Source", "kind": "variable", "doc": "<p>The content item source type. \nThis value is defined at <code>bosesoundtouchapi.soundtouchsource.SoundTouchSources</code>.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.SourceAccount", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.SourceAccount", "kind": "variable", "doc": "<p>The source account this content item is played with.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.UpdatedOn", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.UpdatedOn", "kind": "variable", "doc": "<p>Date and time (in epoch format) of when the preset was last updated.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.ContentItem_ToElement", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.ContentItem_ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the ContentItem fields of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.ContentItem_ToXmlString", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.ContentItem_ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the ContentItem fields of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.ToElement", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.ToString", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.preset.Preset.ToXmlString", "modulename": "bosesoundtouchapi.models.preset", "qualname": "Preset.ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.presetlist", "modulename": "bosesoundtouchapi.models.presetlist", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.presetlist.PresetList", "modulename": "bosesoundtouchapi.models.presetlist", "qualname": "PresetList", "kind": "class", "doc": "<p>SoundTouch device PresetList configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\npreset configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.presetlist.PresetList.__init__", "modulename": "bosesoundtouchapi.models.presetlist", "qualname": "PresetList.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.presetlist.PresetList.append", "modulename": "bosesoundtouchapi.models.presetlist", "qualname": "PresetList.append", "kind": "function", "doc": "<p>Append a new <code>Preset</code> item to the list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  The <code>Preset</code> object to append.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">preset</span><span class=\"o\">.</span><span class=\"n\">Preset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.presetlist.PresetList.ToDictionary", "modulename": "bosesoundtouchapi.models.presetlist", "qualname": "PresetList.ToDictionary", "kind": "function", "doc": "<p>Returns a dictionary representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.presetlist.PresetList.ToElement", "modulename": "bosesoundtouchapi.models.presetlist", "qualname": "PresetList.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.presetlist.PresetList.ToString", "modulename": "bosesoundtouchapi.models.presetlist", "qualname": "PresetList.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.presetlist.PresetList.ToXmlString", "modulename": "bosesoundtouchapi.models.presetlist", "qualname": "PresetList.ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recent", "modulename": "bosesoundtouchapi.models.recent", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.recent.Recent", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent", "kind": "class", "doc": "<p>SoundTouch device Recent configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nsingle recent configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.__init__", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>recentId (int):</strong>  Recent identifier.</li>\n<li><strong>createdOn (int):</strong>  Date time (in epoch format) the recent was created; \nthe current epoch time is used if the value is zero or None.</li>\n<li><strong>source (str):</strong>  ContentItem node source value.</li>\n<li><strong>typeValue (str):</strong>  ContentItem node type value.</li>\n<li><strong>location (str):</strong>  ContentItem node location value.</li>\n<li><strong>sourceAccount (str):</strong>  ContentItem node sourceAccount value.</li>\n<li><strong>isPresetable (bool):</strong>  ContentItem node isPresetable value.</li>\n<li><strong>name (str):</strong>  ContentItem node itemName value.</li>\n<li>containerArt (str)\nContentItem node containerArt value.</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recentId</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">createdOn</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typeValue</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sourceAccount</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">isPresetable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">containerArt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.CreatedOn", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.CreatedOn", "kind": "variable", "doc": "<p>Date and time (in epoch format) of when the recent was created.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.ContainerArt", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.ContainerArt", "kind": "variable", "doc": "<p>The content item's container art url.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.IsPresetable", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.IsPresetable", "kind": "variable", "doc": "<p>Returns True if the content item can be saved as a Preset; otherwise, False.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.ItemType", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.ItemType", "kind": "variable", "doc": "<p>Specifies the type of the content item.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.Location", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.Location", "kind": "variable", "doc": "<p>If present, the content item's direct link to the media.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.Name", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.Name", "kind": "variable", "doc": "<p>The content item's name.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.RecentId", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.RecentId", "kind": "variable", "doc": "<p>The recent identifier (1 - 6).</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.Source", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.Source", "kind": "variable", "doc": "<p>The content item source type. \nThis value is defined at <code>bosesoundtouchapi.soundtouchsource.SoundTouchSources</code>.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.SourceAccount", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.SourceAccount", "kind": "variable", "doc": "<p>The source account this content item is played with.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.ContentItem_ToElement", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.ContentItem_ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the ContentItem fields of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.ContentItem_ToXmlString", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.ContentItem_ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the ContentItem fields of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.ToElement", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.ToString", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recent.Recent.ToXmlString", "modulename": "bosesoundtouchapi.models.recent", "qualname": "Recent.ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recentlist", "modulename": "bosesoundtouchapi.models.recentlist", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.recentlist.RecentList", "modulename": "bosesoundtouchapi.models.recentlist", "qualname": "RecentList", "kind": "class", "doc": "<p>SoundTouch device RecentList configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nrecent configuration of the device.</p>\n\n<p>The list of <code>Recent</code> objects are sorted by <code>CreatedOn</code> in descending\norder so that the last entry added to the recents list is the first \nto appear in the list.</p>\n"}, {"fullname": "bosesoundtouchapi.models.recentlist.RecentList.__init__", "modulename": "bosesoundtouchapi.models.recentlist", "qualname": "RecentList.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.recentlist.RecentList.append", "modulename": "bosesoundtouchapi.models.recentlist", "qualname": "RecentList.append", "kind": "function", "doc": "<p>Append a new <code>Recent</code> item to the list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  The <code>Recent</code> object to append.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">recent</span><span class=\"o\">.</span><span class=\"n\">Recent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recentlist.RecentList.ToDictionary", "modulename": "bosesoundtouchapi.models.recentlist", "qualname": "RecentList.ToDictionary", "kind": "function", "doc": "<p>Returns a dictionary representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recentlist.RecentList.ToElement", "modulename": "bosesoundtouchapi.models.recentlist", "qualname": "RecentList.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recentlist.RecentList.ToString", "modulename": "bosesoundtouchapi.models.recentlist", "qualname": "RecentList.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.recentlist.RecentList.ToXmlString", "modulename": "bosesoundtouchapi.models.recentlist", "qualname": "RecentList.ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.simpleconfig", "modulename": "bosesoundtouchapi.models.simpleconfig", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.simpleconfig.SimpleConfig", "modulename": "bosesoundtouchapi.models.simpleconfig", "qualname": "SimpleConfig", "kind": "class", "doc": "<p>SoundTouch device SimpleConfig configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nsingle-node xml-response item configuration of the device.</p>\n", "bases": "bosesoundtouchapi.soundtouchmodelrequest.SoundTouchModelRequest"}, {"fullname": "bosesoundtouchapi.models.simpleconfig.SimpleConfig.__init__", "modulename": "bosesoundtouchapi.models.simpleconfig", "qualname": "SimpleConfig.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>configName (str):</strong>  The configuration name (or XML tag name when initializing the instance).</li>\n<li><strong>value (str):</strong>  The stored text value.</li>\n<li><strong>attribute (str):</strong>  The stored attributes.</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">configName</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.simpleconfig.SimpleConfig.Attribute", "modulename": "bosesoundtouchapi.models.simpleconfig", "qualname": "SimpleConfig.Attribute", "kind": "variable", "doc": "<p>The stored attributes.</p>\n", "annotation": ": dict"}, {"fullname": "bosesoundtouchapi.models.simpleconfig.SimpleConfig.ConfigName", "modulename": "bosesoundtouchapi.models.simpleconfig", "qualname": "SimpleConfig.ConfigName", "kind": "variable", "doc": "<p>The configuration name (or XML tag name when initializing the instance).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.simpleconfig.SimpleConfig.Value", "modulename": "bosesoundtouchapi.models.simpleconfig", "qualname": "SimpleConfig.Value", "kind": "variable", "doc": "<p>The stored text value from the XML-Element.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.simpleconfig.SimpleConfig.ToString", "modulename": "bosesoundtouchapi.models.simpleconfig", "qualname": "SimpleConfig.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.simpleconfig.SimpleConfig.ToXmlRequestBody", "modulename": "bosesoundtouchapi.models.simpleconfig", "qualname": "SimpleConfig.ToXmlRequestBody", "kind": "function", "doc": "<p>Overridden.\nReturns a POST request body for changing a simple configuration value.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An xml string that can be used in a POST request to update the\n  device configuration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.sourceitem", "modulename": "bosesoundtouchapi.models.sourceitem", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem", "kind": "class", "doc": "<p>SoundTouch device SourceItem configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nsingle source item configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.__init__", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.IsLocal", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.IsLocal", "kind": "variable", "doc": "<p>True if the source can play content locally on the device; otherwise, False to\nindicate the source can only play content remotely.</p>\n\n<p>Local source examples are \"BLUETOOTH\", \"NOTIFICATION\", \"QPLAY\", etc. <br />\nRemote source examples are \"AIRPLAY\", \"UPNP\", \"TUNEIN\", \"SPOTIFY\", etc.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.IsMultiroomAllowed", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.IsMultiroomAllowed", "kind": "variable", "doc": "<p>True if multiroom playback is allowed for this source; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.Source", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.Source", "kind": "variable", "doc": "<p>The source of media content (e.g. \"TUNEIN\", \"AIRPLAY\", \"UPNP\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.SourceAccount", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.SourceAccount", "kind": "variable", "doc": "<p>A source account used to play media content, if one is required.</p>\n\n<p>Example sources requiring a sourceAccount value are \"QPLAY\", \"SPOTIFY\", \"AIRPLAY\", \"ALEXA\", etc.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.Status", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.Status", "kind": "variable", "doc": "<p>The current status of the source (e.g. \"READY\", \"UNAVAILABLE\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.UserName", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.UserName", "kind": "variable", "doc": "<p>A user name used to play media content, if one is required.</p>\n\n<p>Example sources requiring a sourceAccount value are \"QPLAY\", \"SPOTIFY\", \"AIRPLAY\", \"ALEXA\", etc.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.ToElement", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.sourceitem.SourceItem.ToString", "modulename": "bosesoundtouchapi.models.sourceitem", "qualname": "SourceItem.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.sourcelist", "modulename": "bosesoundtouchapi.models.sourcelist", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.sourcelist.SourceList", "modulename": "bosesoundtouchapi.models.sourcelist", "qualname": "SourceList", "kind": "class", "doc": "<p>SoundTouch device SourceList configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nsources configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.sourcelist.SourceList.__init__", "modulename": "bosesoundtouchapi.models.sourcelist", "qualname": "SourceList.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.sourcelist.SourceList.append", "modulename": "bosesoundtouchapi.models.sourcelist", "qualname": "SourceList.append", "kind": "function", "doc": "<p>Append a new <code>SourceItem</code> item to the list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  The <code>SourceItem</code> object to append.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">sourceitem</span><span class=\"o\">.</span><span class=\"n\">SourceItem</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.sourcelist.SourceList.ToDictionary", "modulename": "bosesoundtouchapi.models.sourcelist", "qualname": "SourceList.ToDictionary", "kind": "function", "doc": "<p>Returns a dictionary representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.sourcelist.SourceList.ToElement", "modulename": "bosesoundtouchapi.models.sourcelist", "qualname": "SourceList.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.sourcelist.SourceList.ToString", "modulename": "bosesoundtouchapi.models.sourcelist", "qualname": "SourceList.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus", "kind": "class", "doc": "<p>SoundTouch device Now Playing Status configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nstatus of currently playing media of the device.</p>\n\n<p>Some items are not relevant for certain types of media.  For example,\nthe <code>ConnectionStatus</code> property applies only to BLUETOOTH sources.</p>\n"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.__init__", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Album", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Album", "kind": "variable", "doc": "<p>The album of the playing track (if present). </p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Artist", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Artist", "kind": "variable", "doc": "<p>The creator of the track (if present). </p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.ConnectionDeviceName", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.ConnectionDeviceName", "kind": "variable", "doc": "<p>The staus of the bluetooth connection (if present). </p>\n\n<p>Sources supporting: BLUETOOTH</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.ConnectionStatus", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.ConnectionStatus", "kind": "variable", "doc": "<p>The staus of the bluetooth connection (if present). </p>\n\n<p>Sources supporting: BLUETOOTH</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.ContentItem", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.ContentItem", "kind": "variable", "doc": "<p>The selected ContentItem.</p>\n", "annotation": ": &lt;property object at 0x000002D747291A90&gt;"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Description", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Description", "kind": "variable", "doc": "<p>A brief description that was added to the track (if present).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Duration", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Duration", "kind": "variable", "doc": "<p>The track's duration. </p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Genre", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Genre", "kind": "variable", "doc": "<p>The genre of the track (if present).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Image", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Image", "kind": "variable", "doc": "<p>A url link to the cover image of the track (if present). </p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.IsFavorite", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.IsFavorite", "kind": "variable", "doc": "<p>True if the track has been marked as a favorite; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.IsFavoriteEnabled", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.IsFavoriteEnabled", "kind": "variable", "doc": "<p>True if the track can be saved as a favorite; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.IsRepeatEnabled", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.IsRepeatEnabled", "kind": "variable", "doc": "<p>True if repeat play (one or all) is enabled; otherwise, False. </p>\n\n<p>The <code>RepeatSetting</code> property contains the actual repeat setting.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.IsSeekSupported", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.IsSeekSupported", "kind": "variable", "doc": "<p>True if the currently playing media supports seek functions; otherwise, False.</p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.IsShuffleEnabled", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.IsShuffleEnabled", "kind": "variable", "doc": "<p>True if shuffle play is enabled; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.IsSkipEnabled", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.IsSkipEnabled", "kind": "variable", "doc": "<p>True if the currently playing media supports skip functions; otherwise, False.</p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.IsSkipPreviousEnabled", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.IsSkipPreviousEnabled", "kind": "variable", "doc": "<p>True if the currently playing media skip previous functions are enabled; otherwise, False.</p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.IsSkipPreviousSupported", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.IsSkipPreviousSupported", "kind": "variable", "doc": "<p>True if the currently playing media supports skip previous functions; otherwise, False.</p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.PlayStatus", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.PlayStatus", "kind": "variable", "doc": "<p>Indicates whether the device is currently playing the embedded track.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Position", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Position", "kind": "variable", "doc": "<p>The current position of the playing media (if present). </p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.RepeatSetting", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.RepeatSetting", "kind": "variable", "doc": "<p>Repeat setting value (e.g. \"REPEAT_ALL\", \"REPEAT_ONE\", \"REPEAT_OFF\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.ShuffleSetting", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.ShuffleSetting", "kind": "variable", "doc": "<p>Shuffle setting value (e.g. \"SHUFFLE_ON\", \"SHUFFLE_OFF\", etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Source", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Source", "kind": "variable", "doc": "<p>The media source.\nThis should be one of the sources defined in <code>bosesoundtouchapi.soundtouchsource.SoundTouchSources</code>.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.StationLocation", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.StationLocation", "kind": "variable", "doc": "<p>The station's location.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.StationName", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.StationName", "kind": "variable", "doc": "<p>The station's name (if present). </p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.StreamType", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.StreamType", "kind": "variable", "doc": "<p>The stream type of the current track (TRACK_ONDEMAND when playing from\nan external resource).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.Track", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.Track", "kind": "variable", "doc": "<p>The current media file name (if present). </p>\n\n<p>Sources supporting: AIRPLAY</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.TrackId", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.TrackId", "kind": "variable", "doc": "<p>The track's id.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.nowplayingstatus.NowPlayingStatus.ToString", "modulename": "bosesoundtouchapi.models.nowplayingstatus", "qualname": "NowPlayingStatus.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.systemtimeout", "modulename": "bosesoundtouchapi.models.systemtimeout", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.systemtimeout.SystemTimeout", "modulename": "bosesoundtouchapi.models.systemtimeout", "qualname": "SystemTimeout", "kind": "class", "doc": "<p>SoundTouch device SystemTimeout configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nsystem timeout configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.systemtimeout.SystemTimeout.__init__", "modulename": "bosesoundtouchapi.models.systemtimeout", "qualname": "SystemTimeout.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.systemtimeout.SystemTimeout.IsPowersavingEnabled", "modulename": "bosesoundtouchapi.models.systemtimeout", "qualname": "SystemTimeout.IsPowersavingEnabled", "kind": "variable", "doc": "<p>True if power saving is enabled on the device; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.systemtimeout.SystemTimeout.ToString", "modulename": "bosesoundtouchapi.models.systemtimeout", "qualname": "SystemTimeout.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.volume", "modulename": "bosesoundtouchapi.models.volume", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.volume.Volume", "modulename": "bosesoundtouchapi.models.volume", "qualname": "Volume", "kind": "class", "doc": "<p>SoundTouch device Volume configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nvolume configuration of the device.</p>\n", "bases": "bosesoundtouchapi.soundtouchmodelrequest.SoundTouchModelRequest"}, {"fullname": "bosesoundtouchapi.models.volume.Volume.__init__", "modulename": "bosesoundtouchapi.models.volume", "qualname": "Volume.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>actual (int):</strong>  The actual value of the volume level.</li>\n<li><strong>target (int):</strong>  The targeted value of the volume level.</li>\n<li><strong>isMuted (bool):</strong>  True if the device is muted; otherwise, False.</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">actual</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">isMuted</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.volume.Volume.Actual", "modulename": "bosesoundtouchapi.models.volume", "qualname": "Volume.Actual", "kind": "variable", "doc": "<p>The actual value of the volume level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.volume.Volume.IsMuted", "modulename": "bosesoundtouchapi.models.volume", "qualname": "Volume.IsMuted", "kind": "variable", "doc": "<p>True if the device is muted; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.volume.Volume.Target", "modulename": "bosesoundtouchapi.models.volume", "qualname": "Volume.Target", "kind": "variable", "doc": "<p>The targeted value of the volume level.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.models.volume.Volume.ToString", "modulename": "bosesoundtouchapi.models.volume", "qualname": "Volume.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.volume.Volume.ToXmlRequestBody", "modulename": "bosesoundtouchapi.models.volume", "qualname": "Volume.ToXmlRequestBody", "kind": "function", "doc": "<p>Overridden.\nReturns a POST request body for changing the volume level. </p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An xml string that can be used in a POST request to update the\n  device configuration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.wirelessprofile", "modulename": "bosesoundtouchapi.models.wirelessprofile", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.wirelessprofile.WirelessProfile", "modulename": "bosesoundtouchapi.models.wirelessprofile", "qualname": "WirelessProfile", "kind": "class", "doc": "<p>SoundTouch device WirelessProfile configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent the\nwireless profile configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.wirelessprofile.WirelessProfile.__init__", "modulename": "bosesoundtouchapi.models.wirelessprofile", "qualname": "WirelessProfile.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.wirelessprofile.WirelessProfile.Ssid", "modulename": "bosesoundtouchapi.models.wirelessprofile", "qualname": "WirelessProfile.Ssid", "kind": "variable", "doc": "<p>The network service set identifier (SSID) the device is connected to.</p>\n"}, {"fullname": "bosesoundtouchapi.models.wirelessprofile.WirelessProfile.ToString", "modulename": "bosesoundtouchapi.models.wirelessprofile", "qualname": "WirelessProfile.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.zone", "modulename": "bosesoundtouchapi.models.zone", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.zone.Zone", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone", "kind": "class", "doc": "<p>SoundTouch device Zone configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nmultiroom zone configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.__init__", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>masterDeviceId (str):</strong>  Master device identifier for this zone.</li>\n<li><strong>masterIpAddress (str):</strong>  Master device ipv4 address.</li>\n<li><strong>isZoneMaster (bool):</strong>  True if this zone object is a zone master; otherwise, False.</li>\n<li><strong>members (list):</strong>  List of <code>ZoneMember</code> objects that are under the control of this zone.</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchWarning:</strong>  If any zone member specified by the members argument is not a <code>ZoneMember</code>\nobject, or if a device id was not supplied for each member.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">masterDeviceId</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">masterIpAddress</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">isZoneMaster</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">members</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.IsZoneMaster", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.IsZoneMaster", "kind": "variable", "doc": "<p>Returns true if this zone object is a zone master; otherwise, false.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.MasterDeviceId", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.MasterDeviceId", "kind": "variable", "doc": "<p>Master device identifier for this zone.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.MasterIpAddress", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.MasterIpAddress", "kind": "variable", "doc": "<p>Master device IPV4 address.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.Members", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.Members", "kind": "variable", "doc": "<p>The list of <code>ZoneMember</code> objects that are members of this Zone.</p>\n", "annotation": ": list"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.AddMember", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.AddMember", "kind": "function", "doc": "<p>Add a new member to the list of members for this zone.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  The <code>ZoneMember</code> object to append.</li>\n<li><strong>logsi:</strong>  A SmartInspect logging session, used to log exception messages.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Zone member to be added is not a ZoneMember object.\nZone member to be added did not specify a DeviceId.\nZone member DeviceId to be added or removed cannot be the master DeviceId.</li>\n</ul>\n\n<p>The master SoundTouch device cannot find zone members without their device\nid.  This method will validate each zone member in the list to ensure that\na device id was supplied.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">member</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">zonemember</span><span class=\"o\">.</span><span class=\"n\">ZoneMember</span>,</span><span class=\"param\">\t<span class=\"n\">logsi</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.ToElement", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.ToString", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.ToStringMemberSummary", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.ToStringMemberSummary", "kind": "function", "doc": "<p>Returns a displayable string representation of the Members list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.zone.Zone.ToXmlString", "modulename": "bosesoundtouchapi.models.zone", "qualname": "Zone.ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.zonemember", "modulename": "bosesoundtouchapi.models.zonemember", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.models.zonemember.ZoneMember", "modulename": "bosesoundtouchapi.models.zonemember", "qualname": "ZoneMember", "kind": "class", "doc": "<p>SoundTouch device ZoneMember configuration object.</p>\n\n<p>This class contains the attributes and sub-items that represent a\nsingle multiroom zone member configuration of the device.</p>\n"}, {"fullname": "bosesoundtouchapi.models.zonemember.ZoneMember.__init__", "modulename": "bosesoundtouchapi.models.zonemember", "qualname": "ZoneMember.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ipAddress (str):</strong>  Zone member device IPV4 address.</li>\n<li><strong>deviceId (str):</strong>  Zone member device identifier.</li>\n<li><strong>deviceRole (str):</strong>  The role of the zone member device (optional).</li>\n<li><strong>root (Element):</strong>  xmltree Element item to load arguments from. <br />\nIf specified, then other passed arguments are ignored.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ipAddress</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">deviceId</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">deviceRole</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.models.zonemember.ZoneMember.DeviceId", "modulename": "bosesoundtouchapi.models.zonemember", "qualname": "ZoneMember.DeviceId", "kind": "variable", "doc": "<p>Zone member device identifier. </p>\n\n<p>The master SoundTouch device cannot find zone members without their device id.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.zonemember.ZoneMember.DeviceRole", "modulename": "bosesoundtouchapi.models.zonemember", "qualname": "ZoneMember.DeviceRole", "kind": "variable", "doc": "<p>The role of the zone member device (optional).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.zonemember.ZoneMember.IpAddress", "modulename": "bosesoundtouchapi.models.zonemember", "qualname": "ZoneMember.IpAddress", "kind": "variable", "doc": "<p>Zone member device IPV4 address.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.models.zonemember.ZoneMember.ToElement", "modulename": "bosesoundtouchapi.models.zonemember", "qualname": "ZoneMember.ToElement", "kind": "function", "doc": "<p>Returns an xmltree Element node representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.zonemember.ZoneMember.ToString", "modulename": "bosesoundtouchapi.models.zonemember", "qualname": "ZoneMember.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.models.zonemember.ZoneMember.ToXmlString", "modulename": "bosesoundtouchapi.models.zonemember", "qualname": "ZoneMember.ToXmlString", "kind": "function", "doc": "<p>Returns an xml string representation of the class. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoding (str):</strong>  encode type (e.g. 'utf-8', 'unicode', etc). <br />\nDefault is 'utf-8'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes", "kind": "class", "doc": "<p>This class contains all SoundTouch URI's that COULD be implemented by a Bose device.</p>\n"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.AbortSoftwareUpdate", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.AbortSoftwareUpdate", "kind": "variable", "doc": "<p></p>\n", "default_value": "AbortSoftwareUpdate"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.addGroup", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.addGroup", "kind": "variable", "doc": "<p></p>\n", "default_value": "addGroup"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.addStation", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.addStation", "kind": "variable", "doc": "<p></p>\n", "default_value": "addStation"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.addStereoPair", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.addStereoPair", "kind": "variable", "doc": "<p></p>\n", "default_value": "addStereoPair"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.addWirelessProfile", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.addWirelessProfile", "kind": "variable", "doc": "<p></p>\n", "default_value": "addWirelessProfile"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.addZoneSlave", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.addZoneSlave", "kind": "variable", "doc": "<p></p>\n", "default_value": "addZoneSlave"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.art", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.art", "kind": "variable", "doc": "<p></p>\n", "default_value": "art"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.audiodspcontrols", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.audiodspcontrols", "kind": "variable", "doc": "<p></p>\n", "default_value": "audiodspcontrols"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.audioproductlevelcontrols", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.audioproductlevelcontrols", "kind": "variable", "doc": "<p></p>\n", "default_value": "audioproductlevelcontrols"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.audioproducttonecontrols", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.audioproducttonecontrols", "kind": "variable", "doc": "<p></p>\n", "default_value": "audioproducttonecontrols"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.audiospeakerattributeandsetting", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.audiospeakerattributeandsetting", "kind": "variable", "doc": "<p></p>\n", "default_value": "audiospeakerattributeandsetting"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.balance", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.balance", "kind": "variable", "doc": "<p></p>\n", "default_value": "balance"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.bass", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.bass", "kind": "variable", "doc": "<p></p>\n", "default_value": "bass"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.bassCapabilities", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.bassCapabilities", "kind": "variable", "doc": "<p></p>\n", "default_value": "bassCapabilities"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.bluetoothInfo", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.bluetoothInfo", "kind": "variable", "doc": "<p></p>\n", "default_value": "bluetoothInfo"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.bookmark", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.bookmark", "kind": "variable", "doc": "<p></p>\n", "default_value": "bookmark"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.cancelPairLightswitch", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.cancelPairLightswitch", "kind": "variable", "doc": "<p></p>\n", "default_value": "cancelPairLightswitch"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.capabilities", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.capabilities", "kind": "variable", "doc": "<p></p>\n", "default_value": "capabilities"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.clearBluetoothPaired", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.clearBluetoothPaired", "kind": "variable", "doc": "<p></p>\n", "default_value": "clearBluetoothPaired"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.clearPairedList", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.clearPairedList", "kind": "variable", "doc": "<p></p>\n", "default_value": "clearPairedList"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.clockDisplay", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.clockDisplay", "kind": "variable", "doc": "<p></p>\n", "default_value": "clockDisplay"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.clockTime", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.clockTime", "kind": "variable", "doc": "<p></p>\n", "default_value": "clockTime"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.criticalError", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.criticalError", "kind": "variable", "doc": "<p></p>\n", "default_value": "criticalError"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.criticalErrorUpdate", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.criticalErrorUpdate", "kind": "variable", "doc": "<p></p>\n", "default_value": "criticalErrorUpdate"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.DSPMonoStereo", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.DSPMonoStereo", "kind": "variable", "doc": "<p></p>\n", "default_value": "DSPMonoStereo"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.enterBluetoothPairing", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.enterBluetoothPairing", "kind": "variable", "doc": "<p></p>\n", "default_value": "enterBluetoothPairing"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.enterPairingMode", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.enterPairingMode", "kind": "variable", "doc": "<p></p>\n", "default_value": "enterPairingMode"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.errorNotification", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.errorNotification", "kind": "variable", "doc": "<p></p>\n", "default_value": "errorNotification"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.factoryDefault", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.factoryDefault", "kind": "variable", "doc": "<p></p>\n", "default_value": "factoryDefault"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.genreStations", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.genreStations", "kind": "variable", "doc": "<p></p>\n", "default_value": "genreStations"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.getActiveWirelessProfile", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.getActiveWirelessProfile", "kind": "variable", "doc": "<p></p>\n", "default_value": "getActiveWirelessProfile"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.getBCOReset", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.getBCOReset", "kind": "variable", "doc": "<p></p>\n", "default_value": "getBCOReset"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.getGroup", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.getGroup", "kind": "variable", "doc": "<p></p>\n", "default_value": "getGroup"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.getZone", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.getZone", "kind": "variable", "doc": "<p></p>\n", "default_value": "getZone"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.groupUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.groupUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "groupUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.info", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.info", "kind": "variable", "doc": "<p></p>\n", "default_value": "info"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.introspect", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.introspect", "kind": "variable", "doc": "<p></p>\n", "default_value": "introspect"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.key", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.key", "kind": "variable", "doc": "<p></p>\n", "default_value": "key"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.language", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.language", "kind": "variable", "doc": "<p></p>\n", "default_value": "language"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.languageUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.languageUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "languageUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.listMediaServers", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.listMediaServers", "kind": "variable", "doc": "<p></p>\n", "default_value": "listMediaServers"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.lowPowerStandby", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.lowPowerStandby", "kind": "variable", "doc": "<p></p>\n", "default_value": "lowPowerStandby"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.LowPowerStandbyUpdate", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.LowPowerStandbyUpdate", "kind": "variable", "doc": "<p></p>\n", "default_value": "LowPowerStandbyUpdate"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.marge", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.marge", "kind": "variable", "doc": "<p></p>\n", "default_value": "marge"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.masterMsg", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.masterMsg", "kind": "variable", "doc": "<p></p>\n", "default_value": "masterMsg"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.name", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "name"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.nameSource", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.nameSource", "kind": "variable", "doc": "<p></p>\n", "default_value": "nameSource"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.nameUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.nameUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "nameUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.navigate", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.navigate", "kind": "variable", "doc": "<p></p>\n", "default_value": "navigate"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.netStats", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.netStats", "kind": "variable", "doc": "<p></p>\n", "default_value": "netStats"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.networkInfo", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.networkInfo", "kind": "variable", "doc": "<p></p>\n", "default_value": "networkInfo"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.notification", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.notification", "kind": "variable", "doc": "<p></p>\n", "default_value": "notification"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.nowPlaying", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.nowPlaying", "kind": "variable", "doc": "<p></p>\n", "default_value": "nowPlaying"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.nowPlayingUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.nowPlayingUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "nowPlayingUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.nowSelection", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.nowSelection", "kind": "variable", "doc": "<p></p>\n", "default_value": "nowSelection"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.nowSelectionUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.nowSelectionUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "nowSelectionUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.pairLightswitch", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.pairLightswitch", "kind": "variable", "doc": "<p></p>\n", "default_value": "pairLightswitch"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.pdo", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.pdo", "kind": "variable", "doc": "<p></p>\n", "default_value": "pdo"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.performWirelessSiteSurvey", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.performWirelessSiteSurvey", "kind": "variable", "doc": "<p></p>\n", "default_value": "performWirelessSiteSurvey"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.playbackRequest", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.playbackRequest", "kind": "variable", "doc": "<p></p>\n", "default_value": "playbackRequest"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.playNotification", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.playNotification", "kind": "variable", "doc": "<p></p>\n", "default_value": "playNotification"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.powerManagement", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.powerManagement", "kind": "variable", "doc": "<p></p>\n", "default_value": "powerManagement"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.powersaving", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.powersaving", "kind": "variable", "doc": "<p></p>\n", "default_value": "powersaving"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.presets", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.presets", "kind": "variable", "doc": "<p></p>\n", "default_value": "presets"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.presetsUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.presetsUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "presetsUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.productcechdmicontrol", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.productcechdmicontrol", "kind": "variable", "doc": "<p></p>\n", "default_value": "productcechdmicontrol"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.producthdmiassignmentcontrols", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.producthdmiassignmentcontrols", "kind": "variable", "doc": "<p></p>\n", "default_value": "producthdmiassignmentcontrols"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.pushCustomerSupportInfoToMarge", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.pushCustomerSupportInfoToMarge", "kind": "variable", "doc": "<p></p>\n", "default_value": "pushCustomerSupportInfoToMarge"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.rebroadcastlatencymode", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.rebroadcastlatencymode", "kind": "variable", "doc": "<p></p>\n", "default_value": "rebroadcastlatencymode"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.recents", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.recents", "kind": "variable", "doc": "<p></p>\n", "default_value": "recents"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.recentsUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.recentsUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "recentsUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.removeGroup", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.removeGroup", "kind": "variable", "doc": "<p></p>\n", "default_value": "removeGroup"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.removeMusicServiceAccount", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.removeMusicServiceAccount", "kind": "variable", "doc": "<p></p>\n", "default_value": "removeMusicServiceAccount"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.removePreset", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.removePreset", "kind": "variable", "doc": "<p></p>\n", "default_value": "removePreset"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.removeStation", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.removeStation", "kind": "variable", "doc": "<p></p>\n", "default_value": "removeStation"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.removeStereoPair", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.removeStereoPair", "kind": "variable", "doc": "<p></p>\n", "default_value": "removeStereoPair"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.removeZoneSlave", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.removeZoneSlave", "kind": "variable", "doc": "<p></p>\n", "default_value": "removeZoneSlave"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.requestToken", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.requestToken", "kind": "variable", "doc": "<p></p>\n", "default_value": "requestToken"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.search", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.search", "kind": "variable", "doc": "<p></p>\n", "default_value": "search"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.searchStation", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.searchStation", "kind": "variable", "doc": "<p></p>\n", "default_value": "searchStation"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.select", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.select", "kind": "variable", "doc": "<p></p>\n", "default_value": "select"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.selectLastSoundTouchSource", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.selectLastSoundTouchSource", "kind": "variable", "doc": "<p></p>\n", "default_value": "selectLastSoundTouchSource"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.selectLastSource", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.selectLastSource", "kind": "variable", "doc": "<p></p>\n", "default_value": "selectLastSource"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.selectLastWiFiSource", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.selectLastWiFiSource", "kind": "variable", "doc": "<p></p>\n", "default_value": "selectLastWiFiSource"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.selectLocalSource", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.selectLocalSource", "kind": "variable", "doc": "<p></p>\n", "default_value": "selectLocalSource"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.selectPreset", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.selectPreset", "kind": "variable", "doc": "<p></p>\n", "default_value": "selectPreset"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.serviceAvailability", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.serviceAvailability", "kind": "variable", "doc": "<p></p>\n", "default_value": "serviceAvailability"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.services", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.services", "kind": "variable", "doc": "<p></p>\n", "default_value": "services"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setBCOReset", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setBCOReset", "kind": "variable", "doc": "<p></p>\n", "default_value": "setBCOReset"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setComponentSoftwareVersion", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setComponentSoftwareVersion", "kind": "variable", "doc": "<p></p>\n", "default_value": "setComponentSoftwareVersion"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setMargeAccount", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setMargeAccount", "kind": "variable", "doc": "<p></p>\n", "default_value": "setMargeAccount"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setMusicServiceAccount", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setMusicServiceAccount", "kind": "variable", "doc": "<p></p>\n", "default_value": "setMusicServiceAccount"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setMusicServiceOAuthAccount", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setMusicServiceOAuthAccount", "kind": "variable", "doc": "<p></p>\n", "default_value": "setMusicServiceOAuthAccount"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setPairedStatus", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setPairedStatus", "kind": "variable", "doc": "<p></p>\n", "default_value": "setPairedStatus"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setPairingStatus", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setPairingStatus", "kind": "variable", "doc": "<p></p>\n", "default_value": "setPairingStatus"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setPower", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setPower", "kind": "variable", "doc": "<p></p>\n", "default_value": "setPower"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setProductSerialNumber", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setProductSerialNumber", "kind": "variable", "doc": "<p></p>\n", "default_value": "setProductSerialNumber"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setProductSoftwareVersion", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setProductSoftwareVersion", "kind": "variable", "doc": "<p></p>\n", "default_value": "setProductSoftwareVersion"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setup", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setup", "kind": "variable", "doc": "<p></p>\n", "default_value": "setup"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setWiFiRadio", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setWiFiRadio", "kind": "variable", "doc": "<p></p>\n", "default_value": "setWiFiRadio"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.setZone", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.setZone", "kind": "variable", "doc": "<p></p>\n", "default_value": "setZone"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.slaveMsg", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.slaveMsg", "kind": "variable", "doc": "<p></p>\n", "default_value": "slaveMsg"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.SoftwareUpdateExit", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.SoftwareUpdateExit", "kind": "variable", "doc": "<p></p>\n", "default_value": "SoftwareUpdateExit"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.soundTouchConfigurationStatus", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.soundTouchConfigurationStatus", "kind": "variable", "doc": "<p></p>\n", "default_value": "soundTouchConfigurationStatus"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.soundTouchConfigurationUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.soundTouchConfigurationUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "soundTouchConfigurationUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.sourceDiscoveryStatus", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.sourceDiscoveryStatus", "kind": "variable", "doc": "<p></p>\n", "default_value": "sourceDiscoveryStatus"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.sources", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.sources", "kind": "variable", "doc": "<p></p>\n", "default_value": "sources"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.sourcesUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.sourcesUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "sourcesUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.speaker", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.speaker", "kind": "variable", "doc": "<p></p>\n", "default_value": "speaker"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.standby", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.standby", "kind": "variable", "doc": "<p></p>\n", "default_value": "standby"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.StartSoftwareUpdate", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.StartSoftwareUpdate", "kind": "variable", "doc": "<p></p>\n", "default_value": "StartSoftwareUpdate"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.stationInfo", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.stationInfo", "kind": "variable", "doc": "<p></p>\n", "default_value": "stationInfo"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.storePreset", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.storePreset", "kind": "variable", "doc": "<p></p>\n", "default_value": "storePreset"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.supportedURLs", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.supportedURLs", "kind": "variable", "doc": "<p></p>\n", "default_value": "supportedURLs"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.swUpdateAbort", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.swUpdateAbort", "kind": "variable", "doc": "<p></p>\n", "default_value": "swUpdateAbort"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.swUpdateCheck", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.swUpdateCheck", "kind": "variable", "doc": "<p></p>\n", "default_value": "swUpdateCheck"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.swUpdateQuery", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.swUpdateQuery", "kind": "variable", "doc": "<p></p>\n", "default_value": "swUpdateQuery"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.swUpdateStart", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.swUpdateStart", "kind": "variable", "doc": "<p></p>\n", "default_value": "swUpdateStart"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.swUpdateStatusUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.swUpdateStatusUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "swUpdateStatusUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.systemtimeout", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.systemtimeout", "kind": "variable", "doc": "<p></p>\n", "default_value": "systemtimeout"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.systemtimeoutcontrol", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.systemtimeoutcontrol", "kind": "variable", "doc": "<p></p>\n", "default_value": "systemtimeoutcontrol"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.test", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.test", "kind": "variable", "doc": "<p></p>\n", "default_value": "test"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.testCommandBA", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.testCommandBA", "kind": "variable", "doc": "<p></p>\n", "default_value": "testCommandBA"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.testCommandSU", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.testCommandSU", "kind": "variable", "doc": "<p></p>\n", "default_value": "testCommandSU"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.trackInfo", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.trackInfo", "kind": "variable", "doc": "<p></p>\n", "default_value": "trackInfo"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.updateGroup", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.updateGroup", "kind": "variable", "doc": "<p></p>\n", "default_value": "updateGroup"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.userActivity", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.userActivity", "kind": "variable", "doc": "<p></p>\n", "default_value": "userActivity"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.userActivityUpdate", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.userActivityUpdate", "kind": "variable", "doc": "<p></p>\n", "default_value": "userActivityUpdate"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.userPlayControl", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.userPlayControl", "kind": "variable", "doc": "<p></p>\n", "default_value": "userPlayControl"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.userRating", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.userRating", "kind": "variable", "doc": "<p></p>\n", "default_value": "userRating"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.userTrackControl", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.userTrackControl", "kind": "variable", "doc": "<p></p>\n", "default_value": "userTrackControl"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.volume", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.volume", "kind": "variable", "doc": "<p></p>\n", "default_value": "volume"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.zoneUpdated", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.zoneUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "zoneUpdated"}, {"fullname": "bosesoundtouchapi.uri.soundtouchnodes.SoundTouchNodes.static_init", "modulename": "bosesoundtouchapi.uri.soundtouchnodes", "qualname": "SoundTouchNodes.static_init", "kind": "function", "doc": "<p>Initializes a new static instance of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuri", "modulename": "bosesoundtouchapi.uri.soundtouchuri", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuri.SoundTouchUri", "modulename": "bosesoundtouchapi.uri.soundtouchuri", "qualname": "SoundTouchUri", "kind": "class", "doc": "<p>A SoundTouchUri object can be used in several ways. Since, the object can not\nbe edited, there is no editing available.</p>\n\n<p>The __str__ and __repr__ method will return the assigned path name (created when\ninitiating a new instance).</p>\n"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuri.SoundTouchUri.__init__", "modulename": "bosesoundtouchapi.uri.soundtouchuri", "qualname": "SoundTouchUri.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  The target uri which will be formatted into the url in a request.</li>\n<li><strong>scope (SoundTouchUriScope):</strong>  The scope of this URI object. If it is private, the client may not\nrequest the resource.</li>\n<li><strong>uriType (SoundTouchUriType):</strong>  Defines the type of this uri; it can be either 'request' or 'event'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">soundtouchuriscopes</span><span class=\"o\">.</span><span class=\"n\">SoundTouchUriScopes</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">SoundTouchUriScopes</span><span class=\"o\">.</span><span class=\"n\">OP_SCOPE_PUBLIC</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">uriType</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">soundtouchuritypes</span><span class=\"o\">.</span><span class=\"n\">SoundTouchUriTypes</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">SoundTouchUriTypes</span><span class=\"o\">.</span><span class=\"n\">OP_TYPE_REQUEST</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuri.SoundTouchUri.Path", "modulename": "bosesoundtouchapi.uri.soundtouchuri", "qualname": "SoundTouchUri.Path", "kind": "variable", "doc": "<p>The target uri which will be formatted into the url in a request.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuri.SoundTouchUri.Scope", "modulename": "bosesoundtouchapi.uri.soundtouchuri", "qualname": "SoundTouchUri.Scope", "kind": "variable", "doc": "<p>The scope of this URI object. If it is private, the client may not request \nthe resource.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuri.SoundTouchUri.UriType", "modulename": "bosesoundtouchapi.uri.soundtouchuri", "qualname": "SoundTouchUri.UriType", "kind": "variable", "doc": "<p>Defines the type of this uri; it can be either 'request' or 'event'.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuriscopes", "modulename": "bosesoundtouchapi.uri.soundtouchuriscopes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuriscopes.SoundTouchUriScopes", "modulename": "bosesoundtouchapi.uri.soundtouchuriscopes", "qualname": "SoundTouchUriScopes", "kind": "class", "doc": "<p>SoundTouch URI scopes.</p>\n", "bases": "enum.Enum"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuriscopes.SoundTouchUriScopes.OP_SCOPE_PUBLIC", "modulename": "bosesoundtouchapi.uri.soundtouchuriscopes", "qualname": "SoundTouchUriScopes.OP_SCOPE_PUBLIC", "kind": "variable", "doc": "<p>URIs that are public and can be accessed by everyone will be declared\nwith OP_SCOPE_PUBLIC.</p>\n", "default_value": "&lt;SoundTouchUriScopes.OP_SCOPE_PUBLIC: 0&gt;"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuriscopes.SoundTouchUriScopes.OP_SCOPE_PRIVATE", "modulename": "bosesoundtouchapi.uri.soundtouchuriscopes", "qualname": "SoundTouchUriScopes.OP_SCOPE_PRIVATE", "kind": "variable", "doc": "<p>URIs that are private and can not be accessed by everyone.</p>\n", "default_value": "&lt;SoundTouchUriScopes.OP_SCOPE_PRIVATE: 1&gt;"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuritypes", "modulename": "bosesoundtouchapi.uri.soundtouchuritypes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuritypes.SoundTouchUriTypes", "modulename": "bosesoundtouchapi.uri.soundtouchuritypes", "qualname": "SoundTouchUriTypes", "kind": "class", "doc": "<p>SoundTouch URI types.</p>\n", "bases": "enum.Enum"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuritypes.SoundTouchUriTypes.OP_TYPE_EVENT", "modulename": "bosesoundtouchapi.uri.soundtouchuritypes", "qualname": "SoundTouchUriTypes.OP_TYPE_EVENT", "kind": "variable", "doc": "<p>URIs that are used to capture events can not be queried with a client.\nTherefore, the BoseWebSocket should be used.</p>\n", "default_value": "&lt;SoundTouchUriTypes.OP_TYPE_EVENT: 4&gt;"}, {"fullname": "bosesoundtouchapi.uri.soundtouchuritypes.SoundTouchUriTypes.OP_TYPE_REQUEST", "modulename": "bosesoundtouchapi.uri.soundtouchuritypes", "qualname": "SoundTouchUriTypes.OP_TYPE_REQUEST", "kind": "variable", "doc": "<p>Standard URI type.</p>\n", "default_value": "&lt;SoundTouchUriTypes.OP_TYPE_REQUEST: 8&gt;"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket", "kind": "class", "doc": "<p>A wrapper class to use the notification system provided by SoundTouch devices.</p>\n\n<p>In order to react to a message, there is a listener system. You can add\nfunctions as listener objects. The connection url is defined as follows:\n'ws://{Host}:{Port}/'.  Port 8080 is used by default.</p>\n\n<p>This class can be used in two ways. First, the object can open a\nconnection through the <code>StartNotification</code> method and secondly, the with-statement\ncan be used to create an instance.</p>\n\n<p>You must first check the device capabilities prior to using the support notifications\nfunctionality; if the device does not support it, then it's not going to work!\nTo do this, fetch the device's capabilities and check for a <code>IsWebSocketApiProxyCapable = True</code>\nvalue.  If true, then the device supports sending notifications; if false, it does not.</p>\n\n<p>For more information and code samples refer to <code>bosesoundtouchapi.soundtouchclient.GetCapabilities</code>\nmethod.</p>\n\n<p><details>\n    <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># external package imports.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xml.etree.ElementTree</span> <span class=\"kn\">import</span> <span class=\"n\">Element</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xml.etree</span> <span class=\"kn\">import</span> <span class=\"n\">ElementTree</span>\n\n<span class=\"c1\"># our package imports.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"n\">Capabilities</span><span class=\"p\">,</span> <span class=\"n\">Volume</span><span class=\"p\">,</span> <span class=\"n\">NowPlayingStatus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.ws</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EventHandlerClass</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">OnSoundTouchInfoEvent</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">:</span><span class=\"n\">Element</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">args</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>  <span class=\"c1\"># for pretty printing</span>\n            <span class=\"n\">argsEncoded</span> <span class=\"o\">=</span> <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;unicode&quot;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; status update:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">,</span> <span class=\"n\">argsEncoded</span><span class=\"p\">))</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">OnSoundTouchWebSocketCloseEvent</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">:</span><span class=\"ne\">Exception</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ex</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"c1\"># args will be an Exception object for websocket close events.</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; websocket close event:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)))</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">OnSoundTouchWebSocketErrorEvent</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span><span class=\"p\">,</span> <span class=\"n\">ex</span><span class=\"p\">:</span><span class=\"ne\">Exception</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ex</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"c1\"># args will be an Exception object for websocket errors.</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; websocket error:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)))</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">OnSoundTouchUpdateEvent</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">:</span><span class=\"n\">Element</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">args</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>  <span class=\"c1\"># for pretty printing</span>\n            <span class=\"n\">argsEncoded</span> <span class=\"o\">=</span> <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;unicode&quot;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; status update:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">,</span> <span class=\"n\">argsEncoded</span><span class=\"p\">))</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">OnSoundTouchUpdateEvent_Volume</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">:</span><span class=\"n\">Element</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">args</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>  <span class=\"c1\"># for pretty printing</span>\n            <span class=\"n\">argsEncoded</span> <span class=\"o\">=</span> <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;unicode&quot;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; status update:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">,</span> <span class=\"n\">argsEncoded</span><span class=\"p\">))</span>\n            <span class=\"c1\"># create Volume configuration model from update event argument.</span>\n            <span class=\"n\">config</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">Volume</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">))</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">OnSoundTouchUpdateEvent_NowPlaying</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">:</span><span class=\"n\">Element</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">args</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>  <span class=\"c1\"># for pretty printing</span>\n            <span class=\"n\">argsEncoded</span> <span class=\"o\">=</span> <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;unicode&quot;</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; status update:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">,</span> <span class=\"n\">argsEncoded</span><span class=\"p\">))</span>\n            <span class=\"c1\"># create NowPlayingStatus configuration model from update event argument.</span>\n            <span class=\"n\">config</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">NowPlayingStatus</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"n\">socket</span><span class=\"p\">:</span><span class=\"n\">SoundTouchWebSocket</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n    <span class=\"c1\">#device:SoundTouchDevice = SoundTouchDevice(&quot;192.168.1.130&quot;) # Bose SoundTouch 300</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get device capabilities - must have IsWebSocketApiProxyCapable=True </span>\n    <span class=\"c1\"># in order to support notifications.</span>\n    <span class=\"n\">capabilities</span><span class=\"p\">:</span><span class=\"n\">Capabilities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetCapabilities</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">IsWebSocketApiProxyCapable</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># create and start a websocket to receive notifications from the device.</span>\n        <span class=\"n\">socket</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchWebSocket</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># add our listener(s) that will handle SoundTouch device status updates.</span>\n        <span class=\"c1\">#socket.AddListener(SoundTouchNotifyCategorys.ALL, EventHandlerClass.OnSoundTouchUpdateEvent)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">connectionStateUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">criticalErrorUpdate</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">errorNotification</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">errorUpdate</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">groupUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">languageUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">LowPowerStandbyUpdate</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">nameUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">nowPlayingUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">nowSelectionUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">presetsUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">recentsUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">soundTouchConfigurationUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">sourcesUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">swUpdateStatusUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">volumeUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">zoneUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># you can also add methods for individual models, to make handling them easier.</span>\n        <span class=\"c1\"># add our listener(s) that will handle SoundTouch device status specific updates.</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">nowPlayingUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent_NowPlaying</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">volumeUpdated</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchUpdateEvent_Volume</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># add our listener(s) that will handle SoundTouch device informational events.</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">SoundTouchSdkInfo</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchInfoEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">userActivityUpdate</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchInfoEvent</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># add our listener(s) that will handle SoundTouch websocket related events.</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">WebSocketClose</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchWebSocketCloseEvent</span><span class=\"p\">)</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AddListener</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNotifyCategorys</span><span class=\"o\">.</span><span class=\"n\">WebSocketError</span><span class=\"p\">,</span> <span class=\"n\">EventHandlerClass</span><span class=\"o\">.</span><span class=\"n\">OnSoundTouchWebSocketErrorEvent</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># start receiving updates.</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">StartNotification</span><span class=\"p\">()</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Notification event loop has started.&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Try pressing some buttons on your SoundTouch remote or device ...&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># for testing status notifications.</span>\n        <span class=\"n\">maxcnt</span><span class=\"p\">:</span><span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1200</span>  <span class=\"c1\"># 1200=20 mins, 300=5 mins</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">maxcnt</span><span class=\"p\">):</span>\n\n            <span class=\"c1\"># wait 1 second.</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># did we lose the connection to the SoundTouch device?</span>\n            <span class=\"c1\"># if so, then stop / restart the notification event thread.</span>\n            <span class=\"k\">if</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">IsThreadRunForeverActive</span> <span class=\"o\">==</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;socket.IsThreadRunForeverActive = </span><span class=\"si\">%s</span><span class=\"s2\"> - restarting notification thread ...&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">IsThreadRunForeverActive</span><span class=\"p\">)))</span>\n                <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">StopNotification</span><span class=\"p\">()</span>\n                <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">StartNotification</span><span class=\"p\">()</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;SoundTouch device &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; does not support Bose WebSocket API.&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n    <span class=\"k\">raise</span>\n\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># stop listening for Bose SoundTouch status updates.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">socket</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">StopNotification</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p></details></p>\n"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.__init__", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>client (SoundTouchClient):</strong>  A <code>SoundTouchClient</code> instance to receive status notifications from.</li>\n<li><strong>port (int):</strong>  The port that the SoundTouch WebAPI socket is posting notifications on. <br />\nDefault is 8080.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchclient</span><span class=\"o\">.</span><span class=\"n\">SoundTouchClient</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.Client", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.Client", "kind": "variable", "doc": "<p>A <code>SoundTouchClient</code> instance to receive status notifications from.</p>\n", "annotation": ": bosesoundtouchapi.soundtouchclient.SoundTouchClient"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.IsThreadRunForeverActive", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.IsThreadRunForeverActive", "kind": "variable", "doc": "<p>True if the websocket run_forever() loop is still executing; otherwise, False.</p>\n\n<p>A value of False can indicate that an exception has occured that caused the run_forever()\nloop to exit.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.AddListener", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.AddListener", "kind": "function", "doc": "<p>Adds a listener provided here to the given category.</p>\n\n<p>Since there are different types of events, the category-string can be used\nto add a listener to a specific notification category. The listener must take\nonly two arguments: the <code>SoundTouchClient</code> instance, and an xml.etree.ElementTree.Element\nthat contains the status update itself.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>category (SoundTouchNotifyCategorys):</strong>  The category this listener should be added to. <br />\nUse one of the pre-defined <code>SoundTouchNotifyCategorys</code> values to receive \nupdates for that category (e.g. \"volumeUpdated\", \"nowPlayingUpdated\", etc). <br />\nUse <code>SoundTouchNotifyCategorys.WebSocketError</code> to receive notifications for WebSocket errors. <br />\nUse <code>SoundTouchNotifyCategorys.ALL</code> to receive notifications for any type of update event.</li>\n<li><strong>listener (object):</strong>  A simple listener method which takes the XML-Element as a passed argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if the listener was added successfully; otherwise, False.</p>\n</blockquote>\n\n<p>Please refer to the <code>bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys</code>\nclass for more details on what events are raised and why / when they happen.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchnotifycategorys</span><span class=\"o\">.</span><span class=\"n\">SoundTouchNotifyCategorys</span>,</span><span class=\"param\">\t<span class=\"n\">listener</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.GetListenerGroup", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.GetListenerGroup", "kind": "function", "doc": "<p>Searches for a specific category in the registered ones.</p>\n\n<p>This method is a convenient method to return all listeners that were added\nto a specific context.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>category (str):</strong>  The category, which has to be one of the <code>SoundTouchNotifyCategorys</code> values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list containing all listeners linked to the given category.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.NotifyListeners", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.NotifyListeners", "kind": "function", "doc": "<p>Notifies all listeners that were stored in the given context.</p>\n\n<p>The name of each context is defined to be the tag element of the update\nXML-Element.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>category (str):</strong>  The category of which listeners should be notified from.</li>\n<li><strong>event (xmltree.Element):</strong>  The event represents either an XML-Element with event.tag == category,\nor an Exception type if category = <code>SoundTouchNotifyCategorys.WebSocketError</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.RemoveListener", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.RemoveListener", "kind": "function", "doc": "<p>Removes a listener from the given category.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>category (str):</strong>  The category this listener should be removed from. <br />\nUse one of the pre-defined SoundTouchNotifyCategorys values to receive \nupdates for that category (e.g. \"volumeUpdated\", \"nowPlayingUpdated\", etc).</li>\n<li><strong>listener (object):</strong>  A simple listener method which takes the XML-Element as a passed argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if the listener was removed successfully; otherwise, False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchnotifycategorys</span><span class=\"o\">.</span><span class=\"n\">SoundTouchNotifyCategorys</span>,</span><span class=\"param\">\t<span class=\"n\">listener</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.StartNotification", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.StartNotification", "kind": "function", "doc": "<p>Creates and starts a web socket event loop thread that listens for notifications \nfrom the SoundTouch device.</p>\n\n<p>Only one web socket event loop thread will be started for the device.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket.StopNotification", "modulename": "bosesoundtouchapi.ws.soundtouchwebsocket", "qualname": "SoundTouchWebSocket.StopNotification", "kind": "function", "doc": "<p>Stops the web socket event loop thread, if one was previously started using \nthe <code>StartNotification</code> method.</p>\n\n<p>This method does nothing if the event loop thread was not started.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.bstappmessages", "modulename": "bosesoundtouchapi.bstappmessages", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.bstappmessages.BSTAppMessages", "modulename": "bosesoundtouchapi.bstappmessages", "qualname": "BSTAppMessages", "kind": "class", "doc": "<p>A strongly-typed resource class, for looking up localized strings, etc.</p>\n\n<h6 id=\"threadsafety\">Threadsafety:</h6>\n\n<blockquote>\n  <p>This class is fully thread-safe.</p>\n</blockquote>\n"}, {"fullname": "bosesoundtouchapi.bstappmessages.BSTAppMessages.UNHANDLED_EXCEPTION", "modulename": "bosesoundtouchapi.bstappmessages", "qualname": "BSTAppMessages.UNHANDLED_EXCEPTION", "kind": "variable", "doc": "<p>BST0001E - An unhandled exception occured while processing method \"{0}\".\n{1}</p>\n", "annotation": ": str", "default_value": "&#x27;BST0001E - An unhandled exception occured while processing method &quot;{0}&quot;.\\n{1}\\n&#x27;"}, {"fullname": "bosesoundtouchapi.bstappmessages.BSTAppMessages.ARGUMENT_REQUIRED_ERROR", "modulename": "bosesoundtouchapi.bstappmessages", "qualname": "BSTAppMessages.ARGUMENT_REQUIRED_ERROR", "kind": "variable", "doc": "<p>BST0002E - The \"{0}\" argument is required, and cannot be null / None.</p>\n", "annotation": ": str", "default_value": "&#x27;BST0002E - The &quot;{0}&quot; argument is required, and cannot be null / None.&#x27;"}, {"fullname": "bosesoundtouchapi.bstappmessages.BSTAppMessages.ARGUMENT_TYPE_ERROR", "modulename": "bosesoundtouchapi.bstappmessages", "qualname": "BSTAppMessages.ARGUMENT_TYPE_ERROR", "kind": "variable", "doc": "<p>BST0003E - {0} argument must be of type \"{1}\"; the \"{2}\" type is not supported for this argument.</p>\n", "annotation": ": str", "default_value": "&#x27;BST0003E - {0} argument must be of type &quot;{1}&quot;; the &quot;{2}&quot; type is not supported for this argument.&#x27;"}, {"fullname": "bosesoundtouchapi.bstappmessages.BSTAppMessages.BST_HOST_ADDRESS_INVALID", "modulename": "bosesoundtouchapi.bstappmessages", "qualname": "BSTAppMessages.BST_HOST_ADDRESS_INVALID", "kind": "variable", "doc": "<p>BST1000E - SoundTouch host address is not recognized as a valid IPV4 network address: '%s'.</p>\n", "annotation": ": str", "default_value": "&quot;BST1000E - SoundTouch host address is not recognized as a valid IPV4 network address: &#x27;%s&#x27;.&quot;"}, {"fullname": "bosesoundtouchapi.bstconst", "modulename": "bosesoundtouchapi.bstconst", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.bstconst.VERSION", "modulename": "bosesoundtouchapi.bstconst", "qualname": "VERSION", "kind": "variable", "doc": "<p>Current version of the Bose SoundTouch API Python3 Library.</p>\n", "annotation": ": str", "default_value": "&#x27;1.0.3&#x27;"}, {"fullname": "bosesoundtouchapi.bstconst.PACKAGENAME", "modulename": "bosesoundtouchapi.bstconst", "qualname": "PACKAGENAME", "kind": "variable", "doc": "<p>Name of our package (used by PDoc Documentation build).</p>\n", "annotation": ": str", "default_value": "&#x27;bosesoundtouchapi&#x27;"}, {"fullname": "bosesoundtouchapi.bstconst.PDOC_BRAND_ICON_URL", "modulename": "bosesoundtouchapi.bstconst", "qualname": "PDOC_BRAND_ICON_URL", "kind": "variable", "doc": "<p>PDoc Documentation brand icon link url that is displayed in the help document TOC.</p>\n", "annotation": ": str", "default_value": "&#x27;https://www.bose.com&#x27;"}, {"fullname": "bosesoundtouchapi.bstconst.PDOC_BRAND_ICON_URL_SRC", "modulename": "bosesoundtouchapi.bstconst", "qualname": "PDOC_BRAND_ICON_URL_SRC", "kind": "variable", "doc": "<p>PDoc Documentation brand icon link url that is displayed in the help document TOC.</p>\n", "annotation": ": str", "default_value": "&#x27;bosesoundtouchapi.ico&#x27;"}, {"fullname": "bosesoundtouchapi.bstconst.PDOC_BRAND_ICON_URL_TITLE", "modulename": "bosesoundtouchapi.bstconst", "qualname": "PDOC_BRAND_ICON_URL_TITLE", "kind": "variable", "doc": "<p>PDoc Documentation brand icon link title that is displayed in the help document TOC.</p>\n", "annotation": ": str", "default_value": "&#x27;A SoundTouch Client&#x27;"}, {"fullname": "bosesoundtouchapi.bstconst.UNKNOWN_VALUE", "modulename": "bosesoundtouchapi.bstconst", "qualname": "UNKNOWN_VALUE", "kind": "variable", "doc": "<p>Indicates if an event argument value is unknown for event argument objects that are displayed as a string.</p>\n", "annotation": ": str", "default_value": "&#x27;&lt;unknown&gt;&#x27;"}, {"fullname": "bosesoundtouchapi.bstconst.BOSE_DEVELOPER_APPKEY", "modulename": "bosesoundtouchapi.bstconst", "qualname": "BOSE_DEVELOPER_APPKEY", "kind": "variable", "doc": "<p>Bose Developer application key used for notifications.</p>\n", "annotation": ": str", "default_value": "&#x27;Ml7YGAI9JWjFhU7D348e86JPXtisddBa&#x27;"}, {"fullname": "bosesoundtouchapi.bstconst.MSG_TRACE_DELAY_DEVICE", "modulename": "bosesoundtouchapi.bstconst", "qualname": "MSG_TRACE_DELAY_DEVICE", "kind": "variable", "doc": "<p>Delaying for %d seconds to allow SoundTouch device '%s' to process the change</p>\n", "annotation": ": str", "default_value": "&quot;Delaying for %d seconds to allow SoundTouch device &#x27;%s&#x27; to process the change&quot;"}, {"fullname": "bosesoundtouchapi.bstconst.MSG_TRACE_SET_PROPERTY_VALUE_SIMPLE", "modulename": "bosesoundtouchapi.bstconst", "qualname": "MSG_TRACE_SET_PROPERTY_VALUE_SIMPLE", "kind": "variable", "doc": "<p>Setting %s to '%s' on SoundTouch device: '%s'</p>\n", "annotation": ": str", "default_value": "&quot;Setting %s to &#x27;%s&#x27; on SoundTouch device: &#x27;%s&#x27;&quot;"}, {"fullname": "bosesoundtouchapi.bstconst.MSG_TRACE_GET_CONFIG_OBJECT", "modulename": "bosesoundtouchapi.bstconst", "qualname": "MSG_TRACE_GET_CONFIG_OBJECT", "kind": "variable", "doc": "<p>Getting %s configuration for SoundTouch device: '%s'</p>\n", "annotation": ": str", "default_value": "&quot;Getting %s configuration for SoundTouch device: &#x27;%s&#x27;&quot;"}, {"fullname": "bosesoundtouchapi.bstconst.MSG_TRACE_ACTION_KEY", "modulename": "bosesoundtouchapi.bstconst", "qualname": "MSG_TRACE_ACTION_KEY", "kind": "variable", "doc": "<p>Sending '%s' key press and release to SoundTouch device: '%s'</p>\n", "annotation": ": str", "default_value": "&quot;Sending &#x27;%s&#x27; key press and release action to SoundTouch device: &#x27;%s&#x27;&quot;"}, {"fullname": "bosesoundtouchapi.bstconst.MSG_TRACE_FAVORITE_NOT_ENABLED", "modulename": "bosesoundtouchapi.bstconst", "qualname": "MSG_TRACE_FAVORITE_NOT_ENABLED", "kind": "variable", "doc": "<p>Current NowPlaying item is not enabled for favorites: '%s'</p>\n", "annotation": ": str", "default_value": "&quot;Current NowPlaying item is not enabled for favorites: &#x27;%s&#x27;&quot;"}, {"fullname": "bosesoundtouchapi.bstutils", "modulename": "bosesoundtouchapi.bstutils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.bstutils.static_init", "modulename": "bosesoundtouchapi.bstutils", "qualname": "static_init", "kind": "function", "doc": "<p>Define the decorator used to call an initializer for a class with all static methods.\nThis allows static variables to be initialized one time for the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.bstutils.export", "modulename": "bosesoundtouchapi.bstutils", "qualname": "export", "kind": "function", "doc": "<p>Define the decorator used to modify a module's \"__all__\" variable.\nThis avoids us having to manually modify a module's \"__all__\" variable when adding new classes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.bstutils.Event", "modulename": "bosesoundtouchapi.bstutils", "qualname": "Event", "kind": "class", "doc": "<p>C# like event processing in Python3.</p>\n\n<p><details>\n    <summary>View Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Define the class that will be raising events:</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyFileWatcher</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fileChanged</span> <span class=\"o\">=</span> <span class=\"n\">Event</span><span class=\"p\">()</span>      <span class=\"c1\"># define event</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">watchFiles</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">source_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;foo&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fileChanged</span><span class=\"p\">(</span><span class=\"n\">source_path</span><span class=\"p\">)</span>   <span class=\"c1\"># fire event</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">log_file_change</span><span class=\"p\">(</span><span class=\"n\">source_path</span><span class=\"p\">):</span>       <span class=\"c1\"># event handler 1</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> changed.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">source_path</span><span class=\"p\">,)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">log_file_change2</span><span class=\"p\">(</span><span class=\"n\">source_path</span><span class=\"p\">):</span>      <span class=\"c1\"># event handler 2</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> changed!&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">source_path</span><span class=\"p\">,)</span>\n\n<span class=\"c1\"># Define the code that will be handling raised events.</span>\n<span class=\"n\">watcher</span>              <span class=\"o\">=</span> <span class=\"n\">MyFileWatcher</span><span class=\"p\">()</span>\n<span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">fileChanged</span> <span class=\"o\">+=</span> <span class=\"n\">log_file_change2</span>\n<span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">fileChanged</span> <span class=\"o\">+=</span> <span class=\"n\">log_file_change</span>\n<span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">fileChanged</span> <span class=\"o\">-=</span> <span class=\"n\">log_file_change2</span>\n<span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">watchFiles</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p></details></p>\n"}, {"fullname": "bosesoundtouchapi.bstutils.Event.__init__", "modulename": "bosesoundtouchapi.bstutils", "qualname": "Event.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.bstutils.Event.handlers", "modulename": "bosesoundtouchapi.bstutils", "qualname": "Event.handlers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.bstutils.Event.fire", "modulename": "bosesoundtouchapi.bstutils", "qualname": "Event.fire", "kind": "function", "doc": "<p>Calls (i.e. \"fires\") all method handlers defined for this event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.bstutils.Event.getHandlerCount", "modulename": "bosesoundtouchapi.bstutils", "qualname": "Event.getHandlerCount", "kind": "function", "doc": "<p>Returns the number of method handlers defined for this event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.bstutils.Event.handle", "modulename": "bosesoundtouchapi.bstutils", "qualname": "Event.handle", "kind": "function", "doc": "<p>Adds a method handler for this event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">handler</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.bstutils.Event.unhandle", "modulename": "bosesoundtouchapi.bstutils", "qualname": "Event.unhandle", "kind": "function", "doc": "<p>Removes the specified method handler for this event.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>handler (object):</strong>  The method handler to remove.</li>\n</ul>\n\n<p>This method will not throw an exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">handler</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.bstutils.Event.unhandle_all", "modulename": "bosesoundtouchapi.bstutils", "qualname": "Event.unhandle_all", "kind": "function", "doc": "<p>Removes all method handlers (if any) for this event.</p>\n\n<p>This method will not throw an exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient", "modulename": "bosesoundtouchapi.soundtouchclient", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient", "kind": "class", "doc": "<p>The SoundTouchClient uses the underlying Bose Web Socket api to communicate \nwith a specified Bose SoundTouch device. </p>\n\n<p>This client communicates with a Bose device on port 8090 by default (the\nstandard WebAPI port), but the port number can be changed.</p>\n\n<p>The client uses an urllib3.PoolManager instance to delegate the HTTP-requests.\nSet a custom manager with the manage_traffic() method.</p>\n\n<p>Like the BoseWebSocket, this client can be used in two ways: 1. create a\nclient manually or 2. use the client within a _with_ statement. Additionally,\nthis class implements a dict-like functionality. So, the loaded configuration\ncan be accessed by typing: <code>config = client[&lt;config_name&gt;]</code></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.__init__", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>device (SoundTouchDevice):</strong>  The device to interace with. Some configuration data stored here will be\nupdated if specific methods were called in this client.</li>\n<li><strong>raiseErrors (bool):</strong>  Specifies if the client should raise exceptions returned by the SoundTouch\ndevice. Use <code>ignore</code> to ignore the errors (they will be given as the\nresponse object in a SoundTouchMessage).\nDefault = 'raise'.</li>\n<li><strong>manager (urllib3.PoolManager):</strong>  The manager for HTTP requests to the device.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchdevice</span><span class=\"o\">.</span><span class=\"n\">SoundTouchDevice</span>,</span><span class=\"param\">\t<span class=\"n\">raiseErrors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">manager</span><span class=\"p\">:</span> <span class=\"n\">urllib3</span><span class=\"o\">.</span><span class=\"n\">poolmanager</span><span class=\"o\">.</span><span class=\"n\">PoolManager</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.ConfigurationCache", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.ConfigurationCache", "kind": "variable", "doc": "<p>A dictionary of cached configuration objects that have been obtained from\nthe SoundTouch device.  Use the objects in this cache whenever it is\ntoo expensive or time consuming to make a real-time request from the device.</p>\n\n<p>The configuration cache is updated for any \"Get...()\" methods that return\ndevice information.  All of the \"Get...()\" methods have a <code>refresh:bool</code>\nargument that controls where information is obtained from; if refresh=True,\nthen the device is queried for real-time configuration information. If\nrefresh=False, then the configuration information is pulled from the configuration\ncache dictionary; if the cache does not contain the object, then the device\nis queried for real-time configuration information.</p>\n\n<p>It is obviously MUCH faster to retrieve device configuration objects from the \ncache than from real-time device queries.  This works very well for configuration\nobjects that do not change very often (e.g. Capabilities, Language, SourceList,\netc).  You will still want to make real-time queries for configuration objects\nthat change frequently (e.g. Volume, NowPlayingStatus, Presets, etc).</p>\n\n<p>This property is read-only, and is set when the class is instantiated.  The\ndictionary entries can be changed, but not the dictionary itself.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The <code>_ConfigurationCache</code> property value.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration objects, refreshing from device if needed.</span>\n    <span class=\"c1\"># since the refresh argument is false to all of these, they will request</span>\n    <span class=\"c1\"># real-time information from the device the first time, and then the</span>\n    <span class=\"c1\"># ConfigurationCache will be updated with the results.</span>\n    <span class=\"n\">sourceList</span><span class=\"p\">:</span><span class=\"n\">SourceList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetSourceList</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sourceList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">sourceList</span><span class=\"p\">:</span><span class=\"n\">SourceList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sourceList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "annotation": ": dict"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.Device", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.Device", "kind": "variable", "doc": "<p>The SoundTouchDevice object used to connect to the SoundTouch device.</p>\n\n<p>This property is read-only, and is set when the class is instantiated.</p>\n", "annotation": ": bosesoundtouchapi.soundtouchdevice.SoundTouchDevice"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.Manager", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.Manager", "kind": "variable", "doc": "<p>Sets the request PoolManager object to use for http requests\nto the device.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The `_Manager' property value.</p>\n</blockquote>\n", "annotation": ": urllib3.poolmanager.PoolManager"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SnapshotSettings", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SnapshotSettings", "kind": "variable", "doc": "<p>A dictionary of configuration objects that are used by the Snapshot\nprocessing methods.</p>\n\n<p>This property is read-only.</p>\n", "annotation": ": dict"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.Action", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.Action", "kind": "function", "doc": "<p>Tries to imitate a pressed key.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>keyName (SoundTouchKeys):</strong>   The specified key to press.\nA string is also accepted for this argument.</li>\n</ul>\n\n<p>This method can be used to invoke different actions by using the different\nkeys defined in <code>bosesoundtouchapi.soundtouchkeys.SoundTouchKeys</code>.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># send a POWER action to toggle power state.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Action</span><span class=\"p\">(</span><span class=\"n\">SoundTouchKeys</span><span class=\"o\">.</span><span class=\"n\">POWER</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">POWER key was pressed&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keyName</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchkeys</span><span class=\"o\">.</span><span class=\"n\">SoundTouchKeys</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.AddFavorite", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.AddFavorite", "kind": "function", "doc": "<p>Adds the currently playing media to the device favorites.</p>\n\n<p>This will first make a call to <code>GetNowPlayingStatus()</code> method to ensure\nfavorites are enabled for the now playing media.  If not enabled, then\nthe request is ignored and no exception is raised.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># does nowPlaying item support favorites?</span>\n    <span class=\"k\">if</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">IsFavoriteEnabled</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># add the currently playing media to the device favorites.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">AddFavorite</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># give the device time to process the change.</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current nowPlaying status.</span>\n        <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Favorites not enabled for currently playing media&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.AddZoneMembers", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.AddZoneMembers", "kind": "function", "doc": "<p>Adds the given zone members to the device's zone.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>members (list):</strong>  A list of <code>ZoneMember</code> objects to add to the master zone.</li>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER adding zone members.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Master zone status could not be retrieved. <br />\nMaster zone does not exist; zone members cannot be added. <br />\nMembers argument was not supplied, or has no members. <br />\nMembers argument contained a list item that is not of type <code>ZoneMember</code>.  </li>\n</ul>\n\n<p>The SoundTouch master device cannot find zone members without their device id.  </p>\n\n<p>The SoundTouch device does not return errors if a zone member device id does not\nexist; it simply ignores the invalid member entry and moves on to the next.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># build list of zone members to add.</span>\n    <span class=\"n\">zoneMembers</span><span class=\"p\">:</span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">zoneMembers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZoneMember</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.130&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;E8EB11B9B723&quot;</span><span class=\"p\">))</span>\n    <span class=\"n\">zoneMembers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZoneMember</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.132&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;F9BC35A6D825&quot;</span><span class=\"p\">))</span>\n    <span class=\"n\">zoneMembers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZoneMember</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.133&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B8BD47C7F452&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneBefore</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Zone Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># if zone not active, then create one so that we have something to add.</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">Members</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Creating a new master zone so we have a master zone to add to ...&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># initialize the new master zone configuration.</span>\n        <span class=\"n\">masterZone</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">Zone</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceId</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">Host</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;- master</span>\n        <span class=\"n\">member</span><span class=\"p\">:</span><span class=\"n\">ZoneMember</span>\n        <span class=\"k\">for</span> <span class=\"n\">member</span> <span class=\"ow\">in</span> <span class=\"n\">zoneMembers</span><span class=\"p\">:</span>\n            <span class=\"n\">masterZone</span><span class=\"o\">.</span><span class=\"n\">AddMember</span><span class=\"p\">(</span><span class=\"n\">member</span><span class=\"p\">)</span>                                        <span class=\"c1\"># &lt;- member</span>\n            <span class=\"k\">break</span>   <span class=\"c1\"># only add 1 zone member, so it actually adds something below</span>\n\n        <span class=\"c1\"># create a new master zone configuration on the device.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">CreateZone</span><span class=\"p\">(</span><span class=\"n\">masterZone</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current zone configuration status.</span>\n        <span class=\"n\">zoneBefore</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status Before:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># add zone members to the master zone configuration.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">AddZoneMembers</span><span class=\"p\">(</span><span class=\"n\">zoneMembers</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneAfter</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status After:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneAfter</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">members</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">zonemember</span><span class=\"o\">.</span><span class=\"n\">ZoneMember</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.CreateZone", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.CreateZone", "kind": "function", "doc": "<p>Creates a multiroom zone from a Zone object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>zone (Zone):</strong>  Multiroom configuration (zone) object that will control the zone\n(e.g. the master).  This object also contains a list of all zone\nmembers that will be under its control (e.g. Members property).</li>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER creating the zone.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Zone argument was not supplied. <br />\nZone argument is not of type Zone. <br />\nZone argument did not contain any members.  The zone must have at least \none zone member in order to create a zone.  </li>\n</ul>\n\n<p>The master SoundTouch device cannot find zone members without their device id.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneBefore</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status Before:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># initialize the new master zone configuration.</span>\n    <span class=\"n\">masterZone</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">Zone</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceId</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">Host</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;- master</span>\n    <span class=\"n\">masterZone</span><span class=\"o\">.</span><span class=\"n\">AddMember</span><span class=\"p\">(</span><span class=\"n\">ZoneMember</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.130&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;E8EB11B9B723&quot;</span><span class=\"p\">))</span>        <span class=\"c1\"># &lt;- member</span>\n\n    <span class=\"c1\"># create a new master zone configuration on the device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">CreateZone</span><span class=\"p\">(</span><span class=\"n\">masterZone</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneAfter</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status After:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneAfter</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">zone</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.CreateZoneFromDevices", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.CreateZoneFromDevices", "kind": "function", "doc": "<p>Creates a new multiroom zone with the given member devices. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>master (SoundTouchDevice):</strong>  The device object that will control the zone (e.g. the master).</li>\n<li><strong>members (list):</strong>  A list of SoundTouchDevice objects that will be controlled by the\nmaster zone (e.g. the zone members).</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>    Master argument was not supplied. <br />\nMaster argument is not of type SoundTouchDevice. <br />\nMembers argument is not of type list. <br />\nMembers argument was not supplied, or has no members. <br />\nMembers argument contained a list item that is not of type SoundTouchDevice.  </li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneBefore</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status Before:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># create new device instances for all zone members.</span>\n    <span class=\"n\">device_master</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># master</span>\n    <span class=\"n\">device_member</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.130&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># member</span>\n\n    <span class=\"c1\"># create a new master zone configuration on the device.</span>\n    <span class=\"n\">masterZone</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">CreateZoneFromDevices</span><span class=\"p\">(</span><span class=\"n\">device_master</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">device_member</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Master Zone created:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">masterZone</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)))</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneAfter</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status After:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneAfter</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">master</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchdevice</span><span class=\"o\">.</span><span class=\"n\">SoundTouchDevice</span>,</span><span class=\"param\">\t<span class=\"n\">members</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.Get", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.Get", "kind": "function", "doc": "<p>Makes a GET request to retrieve a stored value.</p>\n\n<p>Use this method when querying for specific nodes. All standard nodes\nare implemented by this class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uri (SoundTouchUri):</strong>  The node where the requested value is stored. DANGER: This request can also have\na massive effect on your Bose device, for instance when calling\n<code>client.get(SoundTouchNodes.resetDefaults)</code>, it will wipe all data on the device and\nperform a factory reset.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An object storing the request uri, optional a payload that has been sent and \n  the response as an <code>xml.etree.ElementTree.Element</code>.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  When errors should not be ignored on this client, they will raise a SoundTouchError\nexception with all information related to that error.</li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xml.etree.ElementTree</span> <span class=\"kn\">import</span> <span class=\"n\">Element</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xml.etree</span> <span class=\"kn\">import</span> <span class=\"n\">ElementTree</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get configuration for specified node.</span>\n    <span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"n\">SoundTouchMessage</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">msg</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">)</span>  <span class=\"c1\"># for pretty printing</span>\n        <span class=\"n\">responseEncoded</span> <span class=\"o\">=</span> <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;unicode&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Get Response Message:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span>  <span class=\"n\">responseEncoded</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">soundtouchuri</span><span class=\"o\">.</span><span class=\"n\">SoundTouchUri</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetBalance", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetBalance", "kind": "function", "doc": "<p>Gets the current balance configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Balance</code> object that contains balance configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">balance</span><span class=\"p\">:</span><span class=\"n\">Balance</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetBalance</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Balance Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">balance</span><span class=\"p\">:</span><span class=\"n\">Balance</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetBalance</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Balance Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">balance</span><span class=\"p\">:</span><span class=\"n\">Balance</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Balance Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">Balance</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetBass", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetBass", "kind": "function", "doc": "<p>Gets the current bass configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Bass</code> object that contains bass configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">bass</span><span class=\"p\">:</span><span class=\"n\">Bass</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetBass</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Bass Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">bass</span><span class=\"p\">:</span><span class=\"n\">Bass</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetBass</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Bass Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">bass</span><span class=\"p\">:</span><span class=\"n\">Bass</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Bass Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bass</span><span class=\"o\">.</span><span class=\"n\">Bass</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetBassCapabilities", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetBassCapabilities", "kind": "function", "doc": "<p>Gets the current bass capability configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>BassCapabilities</code> object that contains bass capabilities configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">bassCapabilities</span><span class=\"p\">:</span><span class=\"n\">BassCapabilities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetBassCapabilities</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bassCapabilities</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">bassCapabilities</span><span class=\"p\">:</span><span class=\"n\">BassCapabilities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetBassCapabilities</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">bassCapabilities</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">bassCapabilities</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">bassCapabilities</span><span class=\"p\">:</span><span class=\"n\">BassCapabilities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">bassCapabilities</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">bassCapabilities</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">basscapabilities</span><span class=\"o\">.</span><span class=\"n\">BassCapabilities</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetCapabilities", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetCapabilities", "kind": "function", "doc": "<p>Gets the current bass capability configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Capabilities</code> object that contains capabilities configuration of the device.</p>\n</blockquote>\n\n<p>The returned object has a dict-like implementation; individual capabilities\ncan be accessed by typing: <code>GetCapabilities_results['capability_name']</code>.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">capabilities</span><span class=\"p\">:</span><span class=\"n\">Capabilities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetCapabilities</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">capabilities</span><span class=\"p\">:</span><span class=\"n\">Capabilities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetCapabilities</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">capabilities</span><span class=\"p\">:</span><span class=\"n\">Capabilities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"o\">.</span><span class=\"n\">Capabilities</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetClockConfig", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetClockConfig", "kind": "function", "doc": "<p>Gets the current clock configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>ClockConfig</code> object that contains clock configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">clockConfig</span><span class=\"p\">:</span><span class=\"n\">ClockConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetClockConfig</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clockConfig</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">clockConfig</span><span class=\"p\">:</span><span class=\"n\">ClockConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetClockConfig</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">clockConfig</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">clockDisplay</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">clockConfig</span><span class=\"p\">:</span><span class=\"n\">ClockConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">clockDisplay</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">clockConfig</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">clockconfig</span><span class=\"o\">.</span><span class=\"n\">ClockConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetClockTime", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetClockTime", "kind": "function", "doc": "<p>Gets the current clock time configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>ClockTime</code> object that contains clock time configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">clockTime</span><span class=\"p\">:</span><span class=\"n\">ClockTime</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetClockTime</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clockTime</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">clockTime</span><span class=\"p\">:</span><span class=\"n\">ClockTime</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetClockTime</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">clockTime</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">clockDisplay</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">clockTime</span><span class=\"p\">:</span><span class=\"n\">ClockTime</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">clockDisplay</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">clockTime</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">clocktime</span><span class=\"o\">.</span><span class=\"n\">ClockTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetDspMono", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetDspMono", "kind": "function", "doc": "<p>Gets the current digital signal processor configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>DSPMonoStereoItem</code> object that contains DSP configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">dspMonoStereoItem</span><span class=\"p\">:</span><span class=\"n\">DSPMonoStereoItem</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetDspMono</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dspMonoStereoItem</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">dspMonoStereoItem</span><span class=\"p\">:</span><span class=\"n\">DSPMonoStereoItem</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetDspMono</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">dspMonoStereoItem</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">DSPMonoStereo</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">dspMonoStereoItem</span><span class=\"p\">:</span><span class=\"n\">DSPMonoStereoItem</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">DSPMonoStereo</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">dspMonoStereoItem</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">dspmonostereoitem</span><span class=\"o\">.</span><span class=\"n\">DSPMonoStereoItem</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetLanguage", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetLanguage", "kind": "function", "doc": "<p>Gets the current language configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>SimpleConfig</code> object that contains language configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">language</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetLanguage</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Device Language = &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">language</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetLanguage</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">language</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">simpleconfig</span><span class=\"o\">.</span><span class=\"n\">SimpleConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetMediaServerList", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetMediaServerList", "kind": "function", "doc": "<p>Gets the list of UPnP Media servers found by the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>MediaServerList</code> object that contains media server configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">mediaServerList</span><span class=\"p\">:</span><span class=\"n\">MediaServerList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetMediaServerList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mediaServerList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">mediaServerList</span><span class=\"p\">:</span><span class=\"n\">MediaServerList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetMediaServerList</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">mediaServerList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">listMediaServers</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">mediaServerList</span><span class=\"p\">:</span><span class=\"n\">MediaServerList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">listMediaServers</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">mediaServerList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">mediaserverlist</span><span class=\"o\">.</span><span class=\"n\">MediaServerList</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetName", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetName", "kind": "function", "doc": "<p>Gets the current name configuration of the device, and updates the SoundTouchDevice \nclass device name if possible.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>SimpleConfig</code> object that contains name configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Device Name = &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Device Name = &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Device Name = &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">simpleconfig</span><span class=\"o\">.</span><span class=\"n\">SimpleConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetNetworkInfo", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetNetworkInfo", "kind": "function", "doc": "<p>Gets the current network information configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>NetworkInfo</code> object that contains network information configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">networkInfo</span><span class=\"p\">:</span><span class=\"n\">NetworkInfo</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNetworkInfo</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">networkInfo</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">networkInfo</span><span class=\"p\">:</span><span class=\"n\">NetworkInfo</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNetworkInfo</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">networkInfo</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">networkInfo</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">networkInfo</span><span class=\"p\">:</span><span class=\"n\">NetworkInfo</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">networkInfo</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">networkInfo</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">networkinfo</span><span class=\"o\">.</span><span class=\"n\">NetworkInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetNetworkStatus", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetNetworkStatus", "kind": "function", "doc": "<p>Gets the current network status configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>NetworkStatus</code> object that contains network status configuration of the device.</p>\n</blockquote>\n\n<p>This method can be used to retrieve the network status of the device for each\nnetwork interface that has established a connection.  This includes details like\nthe interface name (e.g. 'eth0'), the network SSID, MAC Address, and more.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">networkStatus</span><span class=\"p\">:</span><span class=\"n\">NetworkStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNetworkStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">networkStatus</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">networkStatus</span><span class=\"p\">:</span><span class=\"n\">NetworkStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNetworkStatus</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">networkStatus</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">netStats</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">networkStatus</span><span class=\"p\">:</span><span class=\"n\">NetworkStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">netStats</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">networkStatus</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">networkstatus</span><span class=\"o\">.</span><span class=\"n\">NetworkStatus</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetNowPlayingStatus", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetNowPlayingStatus", "kind": "function", "doc": "<p>Gets the now playing status configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>NowPlayingStatus</code> object that contains now playing status configuration of the device.</p>\n</blockquote>\n\n<p>This method can be used to retrieve the status of media that is currently playing\non the device.  This includes the media source, ContentItem, track, artist,\nalbum, preview image, duration, position, play status, shuffle and repeat setting,\nstream type, track ID, station description and the location of the station.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">nowPlayingStatus</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nowPlayingStatus</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">nowPlayingStatus</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlayingStatus</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">nowPlayingStatus</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlayingStatus</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">nowplayingstatus</span><span class=\"o\">.</span><span class=\"n\">NowPlayingStatus</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetOptions", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetOptions", "kind": "function", "doc": "<p>Makes an OPTIONS request and returns the list of available HTTP-Methods.</p>\n\n<p>Use this method when testing whether a node can be accessed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uri (SoundTouchUri):</strong>  The node where the requested value is stored.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of strings storing all available HTTP-Methods.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  When errors should not be ignored on this client, they will raise a SoundTouchError\nexception with all information related to that error.</li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># list available HTTP-Methods for a specific node.</span>\n    <span class=\"n\">node</span><span class=\"p\">:</span><span class=\"n\">SoundTouchUri</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">volume</span>\n    <span class=\"n\">methods</span><span class=\"p\">:</span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetOptions</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Options for &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; node: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">)))</span>\n\n    <span class=\"c1\"># list available HTTP-Methods for ALL nodes supported by the device.</span>\n    <span class=\"n\">node</span><span class=\"p\">:</span><span class=\"n\">SoundTouchUri</span>\n    <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">SupportedUris</span><span class=\"p\">:</span>\n        <span class=\"n\">methods</span><span class=\"p\">:</span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetOptions</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Options for &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; node: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"p\">)))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">soundtouchuri</span><span class=\"o\">.</span><span class=\"n\">SoundTouchUri</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetPowerManagement", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetPowerManagement", "kind": "function", "doc": "<p>Gets the current power management status configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>PowerManagement</code> object that contains power management configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">powerManagement</span><span class=\"p\">:</span><span class=\"n\">PowerManagement</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetPowerManagement</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">powerManagement</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">powerManagement</span><span class=\"p\">:</span><span class=\"n\">PowerManagement</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetPowerManagement</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">powerManagement</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">powerManagement</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">powerManagement</span><span class=\"p\">:</span><span class=\"n\">PowerManagement</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">powerManagement</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">powerManagement</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">powermanagement</span><span class=\"o\">.</span><span class=\"n\">PowerManagement</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetPresetList", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetPresetList", "kind": "function", "doc": "<p>Gets the current preset list configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>PresetList</code> object that contains preset list configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">presetList</span><span class=\"p\">:</span><span class=\"n\">PresetList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetPresetList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">presetList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">presetList</span><span class=\"p\">:</span><span class=\"n\">PresetList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetPresetList</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">presetList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">presets</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">presetList</span><span class=\"p\">:</span><span class=\"n\">PresetList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">presets</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">presetList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">presetlist</span><span class=\"o\">.</span><span class=\"n\">PresetList</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetProperty", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetProperty", "kind": "function", "doc": "<p>Returns a cached property mapped to the given URI.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uri (SoundTouchUri):</strong>  The property key (e.g. 'balance', 'volume', etc).</li>\n<li><strong>classType (type):</strong>  The configuration class type (e.g. Balance, Volume, etc).</li>\n<li><strong>refresh (bool):</strong>  True to refresh the property with real-time information from the device;\notherwise, False to just return the cached value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A configuration instance of the provided classType argument.</p>\n</blockquote>\n\n<p>This method will refresh the property from the device if the property\ndoes not exist in the cache, regardless of the refresh argument value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">soundtouchuri</span><span class=\"o\">.</span><span class=\"n\">SoundTouchUri</span>,</span><span class=\"param\">\t<span class=\"n\">classType</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetRecentList", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetRecentList", "kind": "function", "doc": "<p>Gets the current recent list configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>RecentList</code> object that contains recent list configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">recentList</span><span class=\"p\">:</span><span class=\"n\">RecentList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetRecentList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">recentList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">recentList</span><span class=\"p\">:</span><span class=\"n\">RecentList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetRecentList</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">recentList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">recents</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">recentList</span><span class=\"p\">:</span><span class=\"n\">RecentList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">recents</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">recentList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">recentlist</span><span class=\"o\">.</span><span class=\"n\">RecentList</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetRequestToken", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetRequestToken", "kind": "function", "doc": "<p>Gets a new request token generated by the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>SimpleConfig</code> object that contains the request token in the Attribute property.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">requestToken</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetRequestToken</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">requestToken</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Token = &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">requestToken</span><span class=\"o\">.</span><span class=\"n\">Attribute</span><span class=\"p\">[</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">requestToken</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetRequestToken</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">requestToken</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Token = &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">requestToken</span><span class=\"o\">.</span><span class=\"n\">Attribute</span><span class=\"p\">[</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">requestToken</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">requestToken</span><span class=\"p\">:</span><span class=\"n\">SimpleConfig</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">requestToken</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">requestToken</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Token = &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">requestToken</span><span class=\"o\">.</span><span class=\"n\">Attribute</span><span class=\"p\">[</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">])</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">simpleconfig</span><span class=\"o\">.</span><span class=\"n\">SimpleConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetSourceList", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetSourceList", "kind": "function", "doc": "<p>Gets the current source list configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>SourceList</code> object that contains source list configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">sourceList</span><span class=\"p\">:</span><span class=\"n\">SourceList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetSourceList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sourceList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get specific sourceitem with the source name.</span>\n    <span class=\"n\">sourceItem</span> <span class=\"o\">=</span> <span class=\"n\">sourceList</span><span class=\"p\">[</span><span class=\"s1\">&#39;TUNEIN&#39;</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(by name &#39;TUNEIN&#39;)  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sourceItem</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># get specific sourceitem at the index position.</span>\n    <span class=\"n\">sourceItem</span> <span class=\"o\">=</span> <span class=\"n\">sourceList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(by index 0)        </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sourceItem</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">sourceList</span><span class=\"p\">:</span><span class=\"n\">SourceList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetSourceList</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sourceList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">sourceList</span><span class=\"p\">:</span><span class=\"n\">SourceList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sourceList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">sourcelist</span><span class=\"o\">.</span><span class=\"n\">SourceList</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetSystemTimeout", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetSystemTimeout", "kind": "function", "doc": "<p>Gets the current system timeout configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>SystemTimeout</code> object that contains system timeout configuration of the device.</p>\n</blockquote>\n\n<p>Use this method to determine whether power saving is enabled or not.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">systemTimeout</span><span class=\"p\">:</span><span class=\"n\">SystemTimeout</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetSystemTimeout</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">systemTimeout</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">systemTimeout</span><span class=\"p\">:</span><span class=\"n\">SystemTimeout</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetSystemTimeout</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">systemTimeout</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">systemtimeout</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">systemTimeout</span><span class=\"p\">:</span><span class=\"n\">SystemTimeout</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">systemtimeout</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">systemTimeout</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">systemtimeout</span><span class=\"o\">.</span><span class=\"n\">SystemTimeout</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetVolume", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetVolume", "kind": "function", "doc": "<p>Gets the current volume configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Volume</code> object that contains volume configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume Level = </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">Volume</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetWirelessProfile", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetWirelessProfile", "kind": "function", "doc": "<p>Gets the current wireless profile configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>WirelessProfile</code> object that contains wireless profile configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">wirelessProfile</span><span class=\"p\">:</span><span class=\"n\">WirelessProfile</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetWirelessProfile</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">wirelessProfile</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">wirelessProfile</span><span class=\"p\">:</span><span class=\"n\">WirelessProfile</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetWirelessProfile</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">wirelessProfile</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">getActiveWirelessProfile</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">wirelessProfile</span><span class=\"p\">:</span><span class=\"n\">WirelessProfile</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">getActiveWirelessProfile</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">wirelessProfile</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">wirelessprofile</span><span class=\"o\">.</span><span class=\"n\">WirelessProfile</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.GetZoneStatus", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.GetZoneStatus", "kind": "function", "doc": "<p>Gets the current wireless zone status configuration of the device.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to query the device for realtime information and refresh the cache;\notherwise, False to just return the cached information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A <code>Zone</code> object that contains zone configuration of the device.</p>\n</blockquote>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">zone</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration, refreshing from device if needed.</span>\n    <span class=\"n\">zone</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get cached configuration directly from the configuration manager dictionary.</span>\n    <span class=\"k\">if</span> <span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">getZone</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">:</span>\n        <span class=\"n\">zone</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ConfigurationCache</span><span class=\"p\">[</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">getZone</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Cached configuration, direct:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">zone</span><span class=\"o\">.</span><span class=\"n\">Zone</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MakeRequest", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MakeRequest", "kind": "function", "doc": "<p>Performs a generic request by converting the response into the message object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>method (str):</strong>   The preferred HTTP method (e.g. \"GET\", \"POST\", etc).</li>\n<li><strong>msg (SoundTouchMessage):</strong>   The altered message object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The status code (integer) or allowed methods (list).</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>InterruptedError:</strong>   If an error occurs while requesting content.</li>\n</ul>\n\n<p>A 400 status code is immediately returned for the following scenarios:  </p>\n\n<ul>\n<li>The method argument is not supplied.  </li>\n<li>The msg argument is not supplied.  </li>\n<li>The msg.Uri is not in the device list of supported URI's.  </li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># manually make a request to the volume status node.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">Volume</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Volume object:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n    <span class=\"n\">reqBody</span><span class=\"p\">:</span><span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToXmlRequestBody</span><span class=\"p\">()</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchMessage</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"p\">,</span> <span class=\"n\">reqBody</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MakeRequest</span><span class=\"p\">(</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">MakeRequest Response:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">XmlMessage</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaNextTrack", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaNextTrack", "kind": "function", "doc": "<p>Move to the next track in the current media playlist.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># move to the next track in the current media playlist.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaNextTrack</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaPause", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaPause", "kind": "function", "doc": "<p>Pause the current media playing.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># pause currently playing media.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaPause</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaPlay", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaPlay", "kind": "function", "doc": "<p>Play the currently paused media.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># play currently paused media.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaPlay</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaPlayPause", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaPlayPause", "kind": "function", "doc": "<p>Toggle the Play / Pause state of the current media playing.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># toggle the play / pause state of the current media playing.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaPlayPause</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaPreviousTrack", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaPreviousTrack", "kind": "function", "doc": "<p>Move to the previous track in the current media playlist.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># move to the previous track in the current media playlist.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaPreviousTrack</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaRepeatAll", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaRepeatAll", "kind": "function", "doc": "<p>Enables repeat all processing for the current media playlist.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># enable repeat all processing for the current media playlist.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaRepeatAll</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaRepeatOff", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaRepeatOff", "kind": "function", "doc": "<p>Turns off repeat (all / one) processing for the current media playlist.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># disable repeat (all / one) processing for the current media playlist.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaRepeatOff</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaRepeatOne", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaRepeatOne", "kind": "function", "doc": "<p>Enables repeat single track processing for the current media playlist.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># enable repeat one processing for the current media playlist.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaRepeatOne</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaResume", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaResume", "kind": "function", "doc": "<p>Resume the current media playing. </p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># resume currently playing media.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaResume</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaShuffleOff", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaShuffleOff", "kind": "function", "doc": "<p>Disables shuffling of the current media playlist. </p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># disable shuffling of the current media playlist. </span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaShuffleOff</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaShuffleOn", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaShuffleOn", "kind": "function", "doc": "<p>Enables shuffling of the current media playlist. </p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># enable shuffling of the current media playlist. </span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaShuffleOn</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MediaStop", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MediaStop", "kind": "function", "doc": "<p>Stop the current media playing. </p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># stop currently playing media.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MediaStop</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.Mute", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.Mute", "kind": "function", "doc": "<p>Toggle mute / unmute.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before) </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># toggle mute / unmute of the device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Mute</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after)  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MuteOff", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MuteOff", "kind": "function", "doc": "<p>Unmutes the device, if the device is currently muted.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to check the real-time status of the device; otherwise, False\nto check the cached status of the device. <br />\nDefault = True.</li>\n</ul>\n\n<p>This will first issue a <code>GetVolume()</code> method call to query the current volume of the\ndevice.  If the refresh argument is True, then the volume status is refreshed with real-time\ndata; otherwise the cached volume status is used.</p>\n\n<p>If the volume IsMuted property is true, then the MUTE key will be sent to unmute the device.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before) </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># unmute device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MuteOff</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after)  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.MuteOn", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.MuteOn", "kind": "function", "doc": "<p>Mutes the device, if the device is currently not muted.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to check the real-time status of the device; otherwise, False\nto check the cached status of the device. <br />\nDefault = True.</li>\n</ul>\n\n<p>This will first issue a <code>GetVolume()</code> method call to query the current volume of the\ndevice.  If the refresh argument is True, then the volume status is refreshed with real-time\ndata; otherwise the cached volume status is used.</p>\n\n<p>If the volume IsMuted property is false, then the MUTE key will be sent to mute the device.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before) </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># mute device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">MuteOn</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after)  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.PlayContentItem", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.PlayContentItem", "kind": "function", "doc": "<p>Plays the given ContentItem.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (ContentItem):</strong>  content item to play.</li>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the content item. <br />\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 5; value range is 0 - 10.</li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># play the specified media content.</span>\n    <span class=\"n\">content_item_radio</span><span class=\"p\">:</span><span class=\"n\">ContentItem</span> <span class=\"o\">=</span> <span class=\"n\">ContentItem</span><span class=\"p\">(</span><span class=\"s2\">&quot;TUNEIN&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;stationurl&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;/v1/playback/station/s309605&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"s2\">&quot;K-LOVE 90s&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PlayContentItem</span><span class=\"p\">(</span><span class=\"n\">content_item_radio</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">contentitem</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.PlayNotificationTTS", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.PlayNotificationTTS", "kind": "function", "doc": "<p>Plays a notification message via Google TTS (Text-To-Speech) processing.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sayText (str):</strong>  The message that will be converted from text to speech and played\non the device.</li>\n<li><strong>ttsUrl (str):</strong>  The Text-To-Speech url used to translate the message. <br />\nThe value should contain a \"{saytext}\" format parameter, that will be used\nto insert the encoded sayText value.\nDefault value is: <br />\n\"http://translate.google.com/translate_tts?ie=UTF-8&amp;tl=EN&amp;client=tw-ob&amp;q={saytext}\"</li>\n<li><strong>artist (str):</strong>  The message text that will appear in the NowPlaying Artist node. <br />\nDefault is \"TTS Notification\"</li>\n<li><strong>album (str):</strong>  The message text that will appear in the NowPlaying Album node. <br />\nDefault is \"Google TTS\"</li>\n<li><strong>track (str):</strong>  The message text that will appear in the NowPlaying Track node. <br />\nDefault is the sayText argument value.</li>\n<li><strong>volumeLevel (int):</strong>  The temporary volume level that will be used when the message is played. <br />\nSpecify a value of zero to play at the current volume. <br />\nPer Bose limitations, max level cannot be more than 70.\nDefault is zero.</li>\n<li><strong>appKey (str):</strong>  Bose Developer API application key.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  ttsUrl argument value does not start with 'http://'.\nttsUrl argument was not a string; ignoring PlayNotificationTTS request.</li>\n</ul>\n\n<p>Note that SoundTouch devices do not support playing content from HTTPS (secure \nsocket layer) url's.  A <code>SoundTouchException</code> will be raised if a non <code>http://</code> url \nis supplied for the ttsUrl argument.</p>\n\n<p>There are models of Bose SoundTouch speakers that do not support notifications. Only the \nBose SoundTouch 10, 20, and 30 in the III series support notifications, as far as I know.\nI could not get this to work on my SoundTouch 300, but it did work on my ST 10.</p>\n\n<p>The notification message is played at the level specified by the volumeLevel argument.\nSpecify a volumeLevel of zero to play the notification at the current volume level.\nThe volume level is restored to the level it was before the notification message was \nplayed after the notification is complete; e.g. if you made changes to the volume while\nthe notification is playing then they are changed back to the volume level that was in\neffect prior to playing the notification.  The SoundTouch device automatically takes \ncare of the volume level switching; there are no calls in the method to change the \nvolume or currently playing content status.  The SoundTouch device also limits the\nvolume range between 10 (min) and 70 (max); this is a Bose limitation, and is not\nimposed by this API.</p>\n\n<p>The currently playing content (if any) is paused while the notification message\ncontent is played, and then resumed once the notification ends.</p>\n\n<p>If the device is the master controller of a zone, then the notification message will \nbe played on all devices that are members of the zone.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># use google text to speech to say a message.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Saying message via Google TTS (language=EN) ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PlayNotificationTTS</span><span class=\"p\">(</span><span class=\"s2\">&quot;There is activity at the front door.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># if playing messages back to back, then give the message time to play</span>\n    <span class=\"c1\"># before playing the next one; otherwise the next message is lost.</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># use google text to speech to say a message.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Saying message via Google TTS (language=DE) ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PlayNotificationTTS</span><span class=\"p\">(</span><span class=\"s2\">&quot;There is activity at the front door.&quot;</span><span class=\"p\">,</span> \n                               <span class=\"s2\">&quot;http://translate.google.com/translate_tts?ie=UTF-8&amp;tl=DE&amp;client=tw-ob&amp;q=</span><span class=\"si\">{saytext}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n                               <span class=\"n\">volumeLevel</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># if playing messages back to back, then give the message time to play</span>\n    <span class=\"c1\"># before playing the next one; otherwise the next message is lost.</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># use google text to speech to say a message.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Saying message via Google TTS (language=EN) ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PlayNotificationTTS</span><span class=\"p\">(</span><span class=\"s2\">&quot;There is activity at the front door.&quot;</span><span class=\"p\">,</span> \n                               <span class=\"s2\">&quot;http://translate.google.com/translate_tts?ie=UTF-8&amp;tl=EN&amp;client=tw-ob&amp;q=</span><span class=\"si\">{saytext}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n                               <span class=\"s2\">&quot;Activity Detected&quot;</span><span class=\"p\">,</span> <span class=\"c1\"># &lt;- appears in nowPlaying.Artist</span>\n                               <span class=\"s2\">&quot;Front Door&quot;</span><span class=\"p\">,</span>        <span class=\"c1\"># &lt;- appears in nowPlaying.Album</span>\n                               <span class=\"s2\">&quot;Motion Sensor&quot;</span><span class=\"p\">,</span>     <span class=\"c1\"># &lt;- appears in nowPlaying.Track</span>\n                               <span class=\"n\">volumeLevel</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># if playing messages back to back, then give the message time to play</span>\n    <span class=\"c1\"># before playing the next one; otherwise the next message is lost.</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># use google text to speech to say a message using a custom Bose developer appKey.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Saying message via Google TTS (language=EN) ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PlayNotificationTTS</span><span class=\"p\">(</span><span class=\"s2\">&quot;There is activity at the front door.&quot;</span><span class=\"p\">,</span> \n                               <span class=\"n\">appKey</span><span class=\"o\">=</span><span class=\"s2\">&quot;YourBoseAppKey&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sayText</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ttsUrl</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">artist</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">album</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">track</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">volumeLevel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">appKey</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.PlayUrl", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.PlayUrl", "kind": "function", "doc": "<p>Plays media from the given URL.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url (str):</strong>  The url to play.</li>\n<li><strong>artist (str):</strong>  The message text that will appear in the NowPlaying Artist node. <br />\nDefault is \"Unknown Artist\"</li>\n<li><strong>album (str):</strong>  The message text that will appear in the NowPlaying Album node. <br />\nDefault is \"Unknown Album\"</li>\n<li><strong>track (str):</strong>  The message text that will appear in the NowPlaying Track node. <br />\nDefault is \"Unknown Track\"</li>\n<li><strong>volumeLevel (int):</strong>  The temporary volume level that will be used when the message is played. <br />\nSpecify a value of zero to play at the current volume. <br />\nDefault is zero.</li>\n<li><strong>appKey (str):</strong>  Bose Developer API application key.</li>\n<li><strong>getMetaDataFromUrlFile (bool):</strong>  If true, the artist, album, and song title metadata details will be retrieved\nfrom the ID3 header of the url content (if available); otherwise, False to\nuse the artist, album, and song title arguments specified.</li>\n</ul>\n\n<p>Returns: <br />\n    A <code>SoundTouchMessage</code> object storing the request uri, a payload that has been \n    sent (optional), and the response as an <code>xml.etree.ElementTree.Element</code>.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Url argument value does not start with 'http://' or 'https://'. <br />\nIf the SoundTouch device encounters an error while trying to play the url\nmedia content.</li>\n</ul>\n\n<p>The given url content is played at the level specified by the volumeLevel argument.\nSpecify a volumeLevel of zero to play the given url content at the current volume level.\nThe volume level is restored to the level it was before the given url content was \nplayed after play is complete; e.g. if you made changes to the volume while\nthe given url content is playing then they are changed back to the volume level that was in\neffect prior to playing the given url content.  The SoundTouch device automatically takes \ncare of the volume level switching; there are no calls in the method to change the \nvolume or currently playing content status.</p>\n\n<p>The currently playing content (if any) is paused while the given url content\nis played, and then resumed once the given url content ends.  If the currently\nplaying content is a url (or other \"notification\" source type), then the <code>MediaNextTrack</code>\nmethod will be called to stop the current play and the new source will be played.</p>\n\n<p>If the device is the master controller of a zone, then the given url content will \nbe played on all devices that are members of the zone.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">(before): </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># play the given https url at the current volume level.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Playing HTTPS URL content from the web ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PlayUrl</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://freetestdata.com/wp-content/uploads/2021/09/Free_Test_Data_1MB_MP3.mp3&quot;</span><span class=\"p\">,</span>\n                   <span class=\"s2\">&quot;FreeTestData.com&quot;</span><span class=\"p\">,</span>\n                   <span class=\"s2\">&quot;MP3 Test Data&quot;</span><span class=\"p\">,</span>\n                   <span class=\"s2\">&quot;Free_Test_Data_1MB_MP3&quot;</span><span class=\"p\">,</span>\n                   <span class=\"n\">volumeLevel</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># play the given http url at the current volume level.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Playing HTTP URL content from the web ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PlayUrl</span><span class=\"p\">(</span><span class=\"s2\">&quot;http://www.hyperion-records.co.uk/audiotest/14%20Clementi%20Piano%20Sonata</span><span class=\"si\">%20i</span><span class=\"s2\">n%20D%20major,%20Op</span><span class=\"si\">%2025%</span><span class=\"s2\">20No</span><span class=\"si\">%206%</span><span class=\"s2\">20-%20Movement</span><span class=\"si\">%202%</span><span class=\"s2\">20Un%20poco</span><span class=\"si\">%20a</span><span class=\"s2\">ndante.MP3&quot;</span><span class=\"p\">,</span>\n                   <span class=\"s2\">&quot;Clementi&quot;</span><span class=\"p\">,</span>\n                   <span class=\"s2\">&quot;Movements Album&quot;</span><span class=\"p\">,</span>\n                   <span class=\"s2\">&quot;Piano Sonata in D major&quot;</span><span class=\"p\">,</span>\n                   <span class=\"n\">volumeLevel</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># play the given url, retrieving metadata (artist,album,track) from the url content.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Playing HTTP URL content from Home Assistant ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PlayUrl</span><span class=\"p\">(</span><span class=\"s2\">&quot;http://homeassistant.local:8123/media/local/06</span><span class=\"si\">%20F</span><span class=\"s2\">lawless.mp3?authSig=xxxx&quot;</span><span class=\"p\">,</span>\n                   <span class=\"n\">getMetaDataFromUrlFile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                   <span class=\"n\">volumeLevel</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">(after):  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">artist</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">album</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">track</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">volumeLevel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">appKey</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">getMetaDataFromUrlFile</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.Power", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.Power", "kind": "function", "doc": "<p>Toggle power on / off.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># toggle power on / off of the device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Power</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.PowerOff", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.PowerOff", "kind": "function", "doc": "<p>Set power off, if the device is currently powered on and not in standby mode.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to check the real-time status of the device; otherwise, False\nto check the cached status of the device. <br />\nDefault = True.</li>\n</ul>\n\n<p>This will first issue a <code>GetNowPlayingStatus()</code> method call to query the current status of the\ndevice.  If the refresh argument is True, then the status is refreshed with real-time\ndata; otherwise the cached status is used.</p>\n\n<p>If the nowPlaying source is not \"STANDBY\", then the POWER key will be sent to power off\nthe device.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># power off (standby) the device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PowerOff</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.PowerOn", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.PowerOn", "kind": "function", "doc": "<p>Set power on, if the device is currently in standby mode.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>refresh (bool):</strong>  True to check the real-time status of the device; otherwise, False\nto check the cached status of the device. <br />\nDefault = True.</li>\n</ul>\n\n<p>This will first issue a <code>GetNowPlayingStatus()</code> method call to query the current status of the\ndevice.  If the refresh argument is True, then the status is refreshed with real-time\ndata; otherwise the cached status is used.</p>\n\n<p>If the nowPlaying source is \"STANDBY\", then the POWER key will be sent to power on the device.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># power on the device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PowerOn</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.PowerStandby", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.PowerStandby", "kind": "function", "doc": "<p>Set power to standby, if the device is currently powered on.</p>\n\n<p>This method does not update a configuration, as there is no object to\nconfigure - it simply places the device in STANDBY mode.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># power standby (off) the device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">PowerStandby</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after):  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.Put", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.Put", "kind": "function", "doc": "<p>Makes a POST request to apply a new value for the given node.</p>\n\n<p>Use this method when setting some configuration related data. All standard operations\nwhere a POST request is necessary are implemented by this class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uri (SoundTouchUri):</strong>  The node where the requested value is stored.</li>\n<li><strong>body (str | SoundTouchModelRequest):</strong>  The request body xml, or a class that inherits from <code>SoundTouchModelRequest</code>\nthat implements the <code>ToXmlRequestBody</code> method.</li>\n</ul>\n\n<p>Returns: \n    A <code>SoundTouchMessage</code> object storing the request uri, a payload that has been \n    sent (optional), and the response as an <code>xml.etree.ElementTree.Element</code>.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  When errors should not be ignored on this client, they will raise a SoundTouchError\nexception with all information related to that error.</li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.uri</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xml.etree.ElementTree</span> <span class=\"kn\">import</span> <span class=\"n\">Element</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xml.etree</span> <span class=\"kn\">import</span> <span class=\"n\">ElementTree</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># update configuration for specified node.</span>\n    <span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"n\">SoundTouchMessage</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Put</span><span class=\"p\">(</span><span class=\"n\">SoundTouchNodes</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;volume&gt;10&lt;/volume&gt;&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">msg</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">)</span>  <span class=\"c1\"># for pretty printing</span>\n        <span class=\"n\">responseEncoded</span> <span class=\"o\">=</span> <span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;unicode&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Put Response Message:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span>  <span class=\"n\">responseEncoded</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">soundtouchuri</span><span class=\"o\">.</span><span class=\"n\">SoundTouchUri</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.RefreshConfiguration", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.RefreshConfiguration", "kind": "function", "doc": "<p>Refreshes the cached configuration for the given URI.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uri (SoundTouchUri):</strong>  The configuration uri key.</li>\n<li><strong>classType (type):</strong>  The configuration class type (e.g. Balance, Volume, etc).</li>\n<li><strong>refresh (bool):</strong>  True to refresh the property with real-time information from the device;\notherwise, False to just return the cached value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A configuration instance of the provided classType argument.</p>\n</blockquote>\n\n<p>This method will call the <code>Get()</code> method to refresh the configuration with\nreal-time information from the device, and store the results in the cache.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">soundtouchuri</span><span class=\"o\">.</span><span class=\"n\">SoundTouchUri</span>,</span><span class=\"param\">\t<span class=\"n\">classType</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.RemoveAllPresets", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.RemoveAllPresets", "kind": "function", "doc": "<p>Removes all presets from the device's list of presets.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A message object that may contain more information about the result.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the command fails for any reason.</li>\n</ul>\n\n<p>A <code>GetPresetList()</code> method call is made to retrieve the current list of presets.\nThe returned list of presets are deleted one by one. <br />\nThe message returned is the message returned from the final preset removal. <br />\nIf there were no presets to remove, then the returned result is None.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># remove all presets.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">RemoveAllPresets</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get list of defined presets.</span>\n    <span class=\"n\">presetList</span><span class=\"p\">:</span><span class=\"n\">PresetList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetPresetList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">presetList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.RemovePreset", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.RemovePreset", "kind": "function", "doc": "<p>Removes the specified Preset id from the device's list of presets.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>presetId (int):</strong>  The preset id to remove; valid values are 1 thru 6.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A message object that may contain more information about the result.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the command fails for any reason.</li>\n</ul>\n\n<p>The preset with the specified id is removed. <br />\nNo exception is raised if the preset id does not exist.</p>\n\n<p>Presets and favorites in the SoundTouch app are not reordered once the\npreset is removed; it simply creates an open / empty slot in the list.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># remove preset #4.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">RemovePreset</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get list of defined presets.</span>\n    <span class=\"n\">presetList</span><span class=\"p\">:</span><span class=\"n\">PresetList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetPresetList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">presetList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">presetId</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.RemoveFavorite", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.RemoveFavorite", "kind": "function", "doc": "<p>Removes the currently playing media from the device favorites.</p>\n\n<p>This will first make a call to <code>GetNowPlayingStatus()</code> method to ensure\nfavorites are enabled for the now playing media.  If not enabled, then\nthe request is ignored and no exception is raised.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span> \n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># does nowPlaying item support favorites?</span>\n    <span class=\"k\">if</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">IsFavoriteEnabled</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># remove the currently playing media from the device favorites.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">RemoveFavorite</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># give the device time to process the change.</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current nowPlaying status.</span>\n        <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Favorites not enabled for currently playing media&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.RemoveZone", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.RemoveZone", "kind": "function", "doc": "<p>Removes the given zone.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER removing zone members.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 1; value range is 0 - 10.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Master zone status could not be retrieved. <br />\nMaster zone does not exist; zone members cannot be removed.  </li>\n</ul>\n\n<p>This method retrieves the current master zone status, and issues a call to\n<code>RemoveZoneMembers</code> to remove all members from the zone.  </p>\n\n<p>Note that the master zone itself is also removed; you will need to \nreissue a call to the <code>CreateZone()</code> method to re-create the master zone.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneBefore</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Zone Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># if zone not active, then create one so that we have something to remove.</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">Members</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Creating a new master zone so we have a zone to remove ...&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># build list of zone members to remove.</span>\n        <span class=\"n\">zoneMembers</span><span class=\"p\">:</span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">zoneMembers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZoneMember</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.130&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;E8EB11B9B723&quot;</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># initialize the new master zone configuration.</span>\n        <span class=\"n\">masterZone</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">Zone</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceId</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">Host</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;- master</span>\n        <span class=\"n\">member</span><span class=\"p\">:</span><span class=\"n\">ZoneMember</span>\n        <span class=\"k\">for</span> <span class=\"n\">member</span> <span class=\"ow\">in</span> <span class=\"n\">zoneMembers</span><span class=\"p\">:</span>\n            <span class=\"n\">masterZone</span><span class=\"o\">.</span><span class=\"n\">AddMember</span><span class=\"p\">(</span><span class=\"n\">member</span><span class=\"p\">)</span>                                         <span class=\"c1\"># &lt;- member</span>\n\n        <span class=\"c1\"># create a new master zone configuration on the device.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">CreateZone</span><span class=\"p\">(</span><span class=\"n\">masterZone</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current zone configuration status.</span>\n        <span class=\"n\">zoneBefore</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status Before:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># remove the master zone configuration from the device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">RemoveZone</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneAfter</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status After:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneAfter</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.RemoveZoneMembers", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.RemoveZoneMembers", "kind": "function", "doc": "<p>Removes the given zone members from the device's zone.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>members (list):</strong>  A list of <code>ZoneMember</code> objects to remove from the master zone.</li>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER removing zone members.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Master zone status could not be retrieved. <br />\nMaster zone does not exist; zone members cannot be removed. <br />\nMembers argument was not supplied, or has no members. <br />\nMembers argument contained a list item that is not of type <code>ZoneMember</code>.  </li>\n</ul>\n\n<p>Note that the master zone itself is also removed if there are no zone members\nleft after the remove request is complete.  In this case, you will need to \nreissue a call to the <code>CreateZone()</code> method to re-create the master zone.</p>\n\n<p>The SoundTouch device does not return errors if a zone member device id does not\nexist; it simply ignores the invalid member entry and moves on to the next.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># build list of zone members to remove.</span>\n    <span class=\"n\">zoneMembers</span><span class=\"p\">:</span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">zoneMembers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZoneMember</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.130&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;E8EB11B9B723&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneBefore</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Zone Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># if zone not active, then create one so that we have something to remove.</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">Members</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Creating a new master zone so we have a zone member to remove ...&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># initialize the new master zone configuration.</span>\n        <span class=\"n\">masterZone</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">Zone</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceId</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">Host</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># &lt;- master</span>\n        <span class=\"n\">member</span><span class=\"p\">:</span><span class=\"n\">ZoneMember</span>\n        <span class=\"k\">for</span> <span class=\"n\">member</span> <span class=\"ow\">in</span> <span class=\"n\">zoneMembers</span><span class=\"p\">:</span>\n            <span class=\"n\">masterZone</span><span class=\"o\">.</span><span class=\"n\">AddMember</span><span class=\"p\">(</span><span class=\"n\">member</span><span class=\"p\">)</span>                                         <span class=\"c1\"># &lt;- member</span>\n\n        <span class=\"c1\"># create a new master zone configuration on the device.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">CreateZone</span><span class=\"p\">(</span><span class=\"n\">masterZone</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current zone configuration status.</span>\n        <span class=\"n\">zoneBefore</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status Before:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># remove zone members from the master zone configuration on the device.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">RemoveZoneMembers</span><span class=\"p\">(</span><span class=\"n\">zoneMembers</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current zone configuration status.</span>\n    <span class=\"n\">zoneAfter</span><span class=\"p\">:</span><span class=\"n\">Zone</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetZoneStatus</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Zone Status After:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">zoneAfter</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">members</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.RestoreSnapshot", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.RestoreSnapshot", "kind": "function", "doc": "<p>Restores selected portions of the configuration from a snapshot that was\npreviously taken with the <code>StoreSnapshot</code> method.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait for the playing content to change. <br />\nDefault is 5 seconds.</li>\n</ul>\n\n<p>The following settings will be restored from the snapshot dictionary by default:</p>\n\n<ul>\n<li><code>SoundTouchNodes.nowPlaying.Path</code> - playing content.  </li>\n<li><code>SoundTouchNodes.volume.Path</code> - volume level and mute status.</li>\n</ul>\n\n<p>No restore actions will be taken if snapshot settings do not exist.</p>\n\n<p>You can restore your own custom settings from the snapshot dictionary; note\nthat these custom settings are NOT restored by default.</p>\n\n<p>You may remove default items from the snapshot dictionary prior to calling\nthe <code>RestoreSnapshot</code> method.  Let's say you did not want to restore the\nvolume level - simply remove the volume item from the snapshot dictionary.\nSee the sample code below for an example.</p>\n\n<p><details>\n  <summary>Sample Code</summary><br/></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current settings that will be restored by the snapshot.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Settings before StoreSnapshot ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Now Playing: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume     : </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># store current settings to snapshot.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Storing Snapshot ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">StoreSnapshot</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Snapshot stored **</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># select a different source.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Changing Source ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectSource</span><span class=\"p\">(</span><span class=\"n\">SoundTouchSources</span><span class=\"o\">.</span><span class=\"n\">BLUETOOTH</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># change the volume level.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Changing Volume to 30 ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SetVolumeLevel</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># mute the device.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Changing Mute to On ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">mute_on</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current settings before the snapshot restore.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Settings before RestoreSnapshot ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Now Playing: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume     : </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># if you don&#39;t want to restore a configuration, then simply delete </span>\n    <span class=\"c1\"># it from the snapshot dictionary, like so:</span>\n    <span class=\"c1\"># if SoundTouchNodes.volume.Path in client.SnapshotSettings:</span>\n    <span class=\"c1\">#     client.SnapshotSettings.pop(SoundTouchNodes.volume.Path)</span>\n\n    <span class=\"c1\"># restore settings from snapshot.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Restoring Snapshot ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">RestoreSnapshot</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current settings after the snapshot restore.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Settings after RestoreSnapshot (should match settings before StoreSnapshot) ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Now Playing: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume     : </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectContentItem", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectContentItem", "kind": "function", "doc": "<p>Selects the given ContentItem.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (ContentItem):</strong>  Content item to select.</li>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the content item. <br />\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 5; value range is 0 - 10.</li>\n</ul>\n\n<p>Note that playing of \"https://\" content is not supported by SoundTouch devices.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlayingBefore</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlayingBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># create various content items to play.</span>\n    <span class=\"n\">contentRadio01</span><span class=\"p\">:</span><span class=\"n\">ContentItem</span> <span class=\"o\">=</span> <span class=\"n\">ContentItem</span><span class=\"p\">(</span><span class=\"s2\">&quot;TUNEIN&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;stationurl&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;/v1/playback/station/s249983&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"s2\">&quot;Christian Hits&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">contentRadio02</span><span class=\"p\">:</span><span class=\"n\">ContentItem</span> <span class=\"o\">=</span> <span class=\"n\">ContentItem</span><span class=\"p\">(</span><span class=\"s2\">&quot;TUNEIN&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;stationurl&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;/v1/playback/station/s309605&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"s2\">&quot;K-LOVE 90s&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ensure the now playing changes.</span>\n    <span class=\"n\">selection</span><span class=\"p\">:</span><span class=\"n\">ContentItem</span> <span class=\"o\">=</span> <span class=\"n\">contentRadio01</span>\n    <span class=\"k\">if</span> <span class=\"n\">nowPlayingBefore</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">nowPlayingBefore</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span> <span class=\"o\">==</span> <span class=\"n\">contentRadio01</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">:</span>\n            <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"n\">contentRadio02</span>\n\n    <span class=\"c1\"># selects the specified content item.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Playing content item: </span><span class=\"si\">%s</span><span class=\"s2\"> - </span><span class=\"si\">%s</span><span class=\"s2\"> ...&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectContentItem</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># create various content items to play.</span>\n    <span class=\"n\">selections</span><span class=\"p\">:</span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">selections</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ContentItem</span><span class=\"p\">(</span><span class=\"s2\">&quot;TUNEIN&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;stationurl&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;/v1/playback/station/s249983&quot;</span><span class=\"p\">,</span><span class=\"kc\">None</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"s2\">&quot;Christian Hits&quot;</span><span class=\"p\">))</span>\n    <span class=\"n\">selections</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ContentItem</span><span class=\"p\">(</span><span class=\"s2\">&quot;UPNP&quot;</span><span class=\"p\">,</span><span class=\"kc\">None</span><span class=\"p\">,</span><span class=\"s2\">&quot;http://192.168.1.186:8123/api/tts_proxy/c96b99f3a949febd2a1f680e3b6dc4f01eb67e68_en_-_google_translate.mp3&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;UPnPUserName&quot;</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n    <span class=\"n\">selections</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ContentItem</span><span class=\"p\">(</span><span class=\"s2\">&quot;LOCAL_INTERNET_RADIO&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;stationurl&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;https://content.api.bose.io/core02/svc-bmx-adapter-orion/prod/orion/station?data=eyJuYW1lIjoiSm1uIDgwOTYiLCJpbWFnZVVybCI6IiIsInN0cmVhbVVybCI6Imh0dHA6Ly9qbThuLi5jb20vODA5Ni9zdHJlYW0ifQ%3D%3D&quot;</span><span class=\"p\">,</span><span class=\"kc\">None</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"s2\">&quot;Jmn 8096&quot;</span><span class=\"p\">))</span>\n    <span class=\"n\">selections</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ContentItem</span><span class=\"p\">(</span><span class=\"s2\">&quot;TUNEIN&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;stationurl&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;/v1/playback/station/s309605&quot;</span><span class=\"p\">,</span><span class=\"kc\">None</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"s2\">&quot;K-LOVE 90s&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># play them all</span>\n    <span class=\"n\">selection</span><span class=\"p\">:</span><span class=\"n\">ContentItem</span>\n    <span class=\"k\">for</span> <span class=\"n\">selection</span> <span class=\"ow\">in</span> <span class=\"n\">selections</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Playing content item: </span><span class=\"si\">%s</span><span class=\"s2\"> - </span><span class=\"si\">%s</span><span class=\"s2\"> ...&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectContentItem</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Restoring original source ...&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># play original source (if one was selected).</span>\n    <span class=\"k\">if</span> <span class=\"n\">nowPlayingBefore</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Source</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;STANDBY&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectContentItem</span><span class=\"p\">(</span><span class=\"n\">nowPlayingBefore</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">contentitem</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectPreset", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectPreset", "kind": "function", "doc": "<p>Selects the given preset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (Preset):</strong>  Preset item to select.</li>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the preset.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 5; value range is 0 - 10.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Preset argument was not supplied.</li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Getting list of presets ...&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get list of defined presets.</span>\n    <span class=\"n\">presetList</span><span class=\"p\">:</span><span class=\"n\">PresetList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetPresetList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">presetList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"n\">preset</span><span class=\"p\">:</span><span class=\"n\">Preset</span>\n    <span class=\"k\">for</span> <span class=\"n\">preset</span> <span class=\"ow\">in</span> <span class=\"n\">presetList</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Selecting Preset: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">preset</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">preset</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># select a preset, and delay 10 seconds after for the device to process the change.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectPreset</span><span class=\"p\">(</span><span class=\"n\">preset</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current nowPlaying status.</span>\n        <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Now Playing: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">preset</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">preset</span><span class=\"o\">.</span><span class=\"n\">Preset</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectPreset1", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectPreset1", "kind": "function", "doc": "<p>Mirrors the press and release of the PRESET1 key on the SoundTouch remote.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the preset.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<p>This method does nothing if there is no preset at the specified preset index.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># select the preset, and delay 3 seconds after for the device to process the change.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectPreset1</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectPreset2", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectPreset2", "kind": "function", "doc": "<p>Mirrors the press and release of the PRESET2 key on the SoundTouch remote.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the preset.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<p>This method does nothing if there is no preset at the specified preset index.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># select the preset, and delay 3 seconds after for the device to process the change.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectPreset2</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectPreset3", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectPreset3", "kind": "function", "doc": "<p>Mirrors the press and release of the PRESET3 key on the SoundTouch remote.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the preset.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<p>This method does nothing if there is no preset at the specified preset index.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># select the preset, and delay 3 seconds after for the device to process the change.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectPreset3</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectPreset4", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectPreset4", "kind": "function", "doc": "<p>Mirrors the press and release of the PRESET4 key on the SoundTouch remote.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the preset.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<p>This method does nothing if there is no preset at the specified preset index.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># select the preset, and delay 3 seconds after for the device to process the change.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectPreset4</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectPreset5", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectPreset5", "kind": "function", "doc": "<p>Mirrors the press and release of the PRESET5 key on the SoundTouch remote.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the preset.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<p>This method does nothing if there is no preset at the specified preset index.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># select the preset, and delay 3 seconds after for the device to process the change.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectPreset5</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectPreset6", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectPreset6", "kind": "function", "doc": "<p>Mirrors the press and release of the PRESET6 key on the SoundTouch remote.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the preset.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 3; value range is 0 - 10.</li>\n</ul>\n\n<p>This method does nothing if there is no preset at the specified preset index.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># select the preset, and delay 3 seconds after for the device to process the change.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectPreset6</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectRecent", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectRecent", "kind": "function", "doc": "<p>Selects the given recent.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (Recent):</strong>  Recent item to select.</li>\n<li><strong>delay (int):</strong>  Time delay (in seconds) to wait AFTER selecting the recent.\nThis delay will give the device time to process the change before another \ncommand is accepted. <br />\nDefault is 5; value range is 0 - 10.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Recent argument was not supplied.</li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Getting list of recents ...&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get list of defined recents.</span>\n    <span class=\"n\">recents</span><span class=\"p\">:</span><span class=\"n\">RecentList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetRecentList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">recents</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># process list.</span>\n    <span class=\"n\">recent</span><span class=\"p\">:</span><span class=\"n\">Recent</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">recent</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">recents</span><span class=\"p\">)):</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Selecting Recent: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">recent</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">recent</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># select a recent, and delay 10 seconds after for the device to process the change.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectRecent</span><span class=\"p\">(</span><span class=\"n\">recent</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current nowPlaying status.</span>\n        <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Now Playing: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># only process a few of the recent entries, as there could be a lot.</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">recent</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">recent</span><span class=\"o\">.</span><span class=\"n\">Recent</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SelectSource", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SelectSource", "kind": "function", "doc": "<p>Selects a new input source.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>source (SoundTouchSources | str):</strong>  Input source value; this can either be a <code>SoundTouchSources</code> enum value or a string.\nIf specifying a string value, then it should be in upper-case.</li>\n<li><strong>sourceAccount (str):</strong>  Source account value; some sources require one when changing the input \nsource (e.g. \"AUX\").</li>\n<li><strong>delay (int):</strong>  time delay (in seconds) to wait AFTER selecting the source.  This delay\nwill give the SoundTouch device time to process the change before another \ncommand is accepted.\ndefault is 3 seconds, and value range is 0 - 10.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A SoundTouchMessage response that indicates success or failure of the command.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  Source argument was not supplied.  </li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlayingBefore</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlayingBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># get list of source items.</span>\n    <span class=\"n\">sources</span><span class=\"p\">:</span><span class=\"n\">SourceList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetSourceList</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Sources supported by the device:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Selecting Sources one-by-one ...&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># select each source.</span>\n    <span class=\"n\">sourceItem</span><span class=\"p\">:</span><span class=\"n\">SourceItem</span>\n    <span class=\"k\">for</span> <span class=\"n\">sourceItem</span> <span class=\"ow\">in</span> <span class=\"n\">sources</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># trace.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;- Source=&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;, SourceAccount=&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; ...&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">sourceItem</span><span class=\"o\">.</span><span class=\"n\">Source</span><span class=\"p\">,</span> <span class=\"n\">sourceItem</span><span class=\"o\">.</span><span class=\"n\">SourceAccount</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># select an input source.</span>\n        <span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"n\">SoundTouchMessage</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectSource</span><span class=\"p\">(</span><span class=\"n\">sourceItem</span><span class=\"o\">.</span><span class=\"n\">Source</span><span class=\"p\">,</span> <span class=\"n\">sourceItem</span><span class=\"o\">.</span><span class=\"n\">SourceAccount</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Restoring original source ...&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># play original source (if one was selected).</span>\n    <span class=\"k\">if</span> <span class=\"n\">nowPlayingBefore</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Source</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;STANDBY&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectContentItem</span><span class=\"p\">(</span><span class=\"n\">nowPlayingBefore</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchsources</span><span class=\"o\">.</span><span class=\"n\">SoundTouchSources</span>,</span><span class=\"param\">\t<span class=\"n\">sourceAccount</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SetBassLevel", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SetBassLevel", "kind": "function", "doc": "<p>Sets the device bass level to the given level.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level (int):</strong>  Bass level to set, in the range of -9 (no bass) to 0 (full bass).\nThe range can vary by device; use <code>GetBassCapabilities()</code> method to\nretrieve the allowable range for your device.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SetName", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SetName", "kind": "function", "doc": "<p>Sets a new device name.</p>\n\n<p><details>\n  <summary>Sample Code</summary><br/></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name Before: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set the device name.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"s1\">&#39;My SoundTouch 10&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name After:  &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.SetVolumeLevel", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.SetVolumeLevel", "kind": "function", "doc": "<p>Sets the device volume level to the given level.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level (int):</strong>  Volume level to set, in the range of 0 (mute) to 100 (full volume).</li>\n</ul>\n\n<p><details>\n  <summary>Sample Code</summary><br/></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current volume level.</span>\n    <span class=\"n\">volumeBefore</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Volume Levels: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">volumeBefore</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># for testing purposes, use a volume of 30.  if the volume is currently at 30,</span>\n    <span class=\"c1\"># then we will use a volume of 25.</span>\n    <span class=\"n\">newLevel</span><span class=\"p\">:</span><span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n    <span class=\"k\">if</span> <span class=\"n\">volumeBefore</span><span class=\"o\">.</span><span class=\"n\">Actual</span> <span class=\"o\">==</span> <span class=\"n\">newLevel</span><span class=\"p\">:</span>\n        <span class=\"n\">newLevel</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Setting Volume level to </span><span class=\"si\">%d</span><span class=\"s2\"> (from </span><span class=\"si\">%s</span><span class=\"s2\">) ...&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">newLevel</span><span class=\"p\">,</span> <span class=\"n\">volumeBefore</span><span class=\"o\">.</span><span class=\"n\">Actual</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># set volume to specific level.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SetVolumeLevel</span><span class=\"p\">(</span><span class=\"n\">newLevel</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current volume level.</span>\n    <span class=\"n\">volumeAfter</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Changed Volume Levels: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">volumeAfter</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.StorePreset", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.StorePreset", "kind": "function", "doc": "<p>Stores the given Preset to the device's list of presets.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (Preset):</strong>  The Preset object to store.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A message object that may contain more information about the result.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the command fails for any reason.</li>\n</ul>\n\n<p>Most SoundTouch devices can only store 6 presets in their internal memory.\nThe Preset.preset_id property controls what slot the stored preset gets\nplaced in.  If a preset already exists in a slot, then it is over-written\nwith the newly stored preset.  If a preset with the same details exists in\nanother slot, then the duplicate preset is removed and its slot is emptied.</p>\n\n<p><details>\n  <summary>Sample Code</summary><br/></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># create a new preset - radio station.</span>\n    <span class=\"n\">new_preset_radio</span><span class=\"p\">:</span><span class=\"n\">Preset</span> <span class=\"o\">=</span> <span class=\"n\">Preset</span><span class=\"p\">(</span>\n        <span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;TUNEIN&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;stationurl&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;/v1/playback/station/s309605&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;My New Preset&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;http://cdn-profiles.tunein.com/s309605/images/logog.png?t=637986891960000000&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Storing Preset: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">new_preset_radio</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">new_preset_radio</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># store preset.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">StorePreset</span><span class=\"p\">(</span><span class=\"n\">new_preset_radio</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get list of defined presets.</span>\n    <span class=\"n\">presetList</span><span class=\"p\">:</span><span class=\"n\">PresetList</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetPresetList</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">presetList</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">preset</span><span class=\"o\">.</span><span class=\"n\">Preset</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchmessage</span><span class=\"o\">.</span><span class=\"n\">SoundTouchMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.StoreSnapshot", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.StoreSnapshot", "kind": "function", "doc": "<p>Stores selected portions of the configuration so that they can be easily\nrestored with the <code>RestoreSnapshot</code> method.</p>\n\n<p>The following settings will be stored to the snapshot dictionary by default:</p>\n\n<ul>\n<li><code>SoundTouchNodes.nowPlaying.Path</code> - playing content.  </li>\n<li><code>SoundTouchNodes.volume.Path</code> - volume level and mute status.</li>\n</ul>\n\n<p>The <code>SnapshotSettings</code> dictionary is cleared prior to storing any settings.</p>\n\n<p><details>\n  <summary>Sample Code</summary><br/></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current settings that will be restored by the snapshot.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Settings before StoreSnapshot ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Now Playing: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume     : </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># store current settings to snapshot.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Storing Snapshot ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">StoreSnapshot</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Snapshot stored **</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># select a different source.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Changing Source ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SelectSource</span><span class=\"p\">(</span><span class=\"n\">SoundTouchSources</span><span class=\"o\">.</span><span class=\"n\">BLUETOOTH</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># change the volume level.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Changing Volume to 30 ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SetVolumeLevel</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># mute the device.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Changing Mute to On ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">mute_on</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current settings before the snapshot restore.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Settings before RestoreSnapshot ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Now Playing: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume     : </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n    <span class=\"c1\"># if you don&#39;t want to restore a configuration, then simply delete </span>\n    <span class=\"c1\"># it from the snapshot dictionary, like so:</span>\n    <span class=\"c1\"># if SoundTouchNodes.volume.Path in client.SnapshotSettings:</span>\n    <span class=\"c1\">#     client.SnapshotSettings.pop(SoundTouchNodes.volume.Path)</span>\n\n    <span class=\"c1\"># restore settings from snapshot.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Restoring Snapshot ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">RestoreSnapshot</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get current settings after the snapshot restore.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">** Settings after RestoreSnapshot (should match settings before StoreSnapshot) ... **&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Now Playing: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; - &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ContentItem</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">))</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume     : </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.ThumbsDown", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.ThumbsDown", "kind": "function", "doc": "<p>Removes the currently playing media from the device favorites.</p>\n\n<p>This will first make a call to <code>GetNowPlayingStatus()</code> method to ensure\nfavorites are enabled for the now playing media.  If not enabled, then\nthe request is ignored and no exception is raised.</p>\n\n<p>The THUMBS_DOWN key appears to do the same thing as the REMOVE_FAVORITE\nkey, but it's included here for completeness.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># does nowPlaying item support favorites?</span>\n    <span class=\"k\">if</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">IsFavoriteEnabled</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># remove the currently playing media from the device favorites.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ThumbsDown</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># give the device time to process the change.</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current nowPlaying status.</span>\n        <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Favorites not enabled for currently playing media&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.ThumbsUp", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.ThumbsUp", "kind": "function", "doc": "<p>Adds the currently playing media to the device favorites.</p>\n\n<p>This will first make a call to <code>GetNowPlayingStatus()</code> method to ensure\nfavorites are enabled for the now playing media.  If not enabled, then\nthe request is ignored and no exception is raised.</p>\n\n<p>The THUMBS_UP key appears to do the same thing as the ADD_FAVORITE\nkey, but it's included here for completeness.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get current nowPlaying status.</span>\n    <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Current Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># does nowPlaying item support favorites?</span>\n    <span class=\"k\">if</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">IsFavoriteEnabled</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># add the currently playing media to the device favorites.</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ThumbsUp</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># give the device time to process the change.</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get current nowPlaying status.</span>\n        <span class=\"n\">nowPlaying</span><span class=\"p\">:</span><span class=\"n\">NowPlayingStatus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetNowPlayingStatus</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Updated Now Playing Status:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">nowPlaying</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Favorites not enabled for currently playing media&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.ToString", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.VolumeDown", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.VolumeDown", "kind": "function", "doc": "<p>Decrease the volume of the device by one. </p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before) </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># tick volume down one notch.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">VolumeDown</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after)  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchclient.SoundTouchClient.VolumeUp", "modulename": "bosesoundtouchapi.soundtouchclient", "qualname": "SoundTouchClient.VolumeUp", "kind": "function", "doc": "<p>Increase the volume of the device by one. </p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi.models</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># create SoundTouch client instance from device.</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span><span class=\"n\">SoundTouchClient</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchClient</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(before) </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># tick volume up one notch.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">VolumeUp</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get real-time configuration from the device.</span>\n    <span class=\"n\">volume</span><span class=\"p\">:</span><span class=\"n\">Volume</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">GetVolume</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;(after)  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchdevice", "modulename": "bosesoundtouchapi.soundtouchdevice", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice", "kind": "class", "doc": "<p>This class contains device-related information, such as: host ip address,\ndevice name/type/id, a list of the device's components, a list of supported\nURLs and the current network configuration.</p>\n\n<p>The supported URLs are used by the SoundTouchClient to verify the requested\nURL is supported by the device.</p>\n\n<p>In order to load all properties and attributes of the SoundTouchDevice object, some\nspecial URLs will be queried:\n    - <a href=\"http://host:8090/info\">http://host:8090/info</a> (contains basic device information)\n    - <a href=\"http://host:8090/supportedURLs\">http://host:8090/supportedURLs</a> (contains URL's supported by the device)</p>\n\n<p>Click the <strong>Sample Code</strong> links in the individual methods for sample code examples.</p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.__init__", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  An Ipv4 address of the device; it must the following regular expression\npattern for a IP V4 network address: r\"\\d{1,3}([.]\\d{1,3}){3}\".</li>\n<li><strong>connectTimeout (int):</strong>  Controls how long (in seconds) a connection request is allowed to run \nbefore being aborted. <br />\nOnly used if the proxy argument is null (e.g. default proxy manager is used). <br />\nDefault is 30 seconds.</li>\n<li><strong>proxyManager (Optional[urllib3.ProxyManager]):</strong>  If a custom proxy should be used, it can be specified here;\notherwise, a default urllib3.PoolManager is used for http requests / responses.</li>\n<li><strong>port (int):</strong>  IPV4 port number the Bose WebAPI is listening on for incoming requests on the device.\nDefault is 8090, the standard WebAPI port number.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>SoundTouchError:</strong>  SoundTouch host address is not recognized as a valid IPV4 network address. <br />\nCould not retrieve SoundTouch device information. <br />\nCould not retrieve SoundTouch device supported urls.  </li>\n<li><strong>SoundTouchException:</strong>  If the method fails for any reason.</li>\n</ul>\n\n<p>This method loads all components and device properties allocated at the given \nSoundTouch host.</p>\n\n<p><details>\n  <summary>Sample Code</summary></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">bosesoundtouchapi</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># create SoundTouch device instance.</span>\n    <span class=\"n\">device</span><span class=\"p\">:</span><span class=\"n\">SoundTouchDevice</span> <span class=\"o\">=</span> <span class=\"n\">SoundTouchDevice</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.131&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># Bose SoundTouch 10</span>\n\n    <span class=\"c1\"># display device basic details and all installed components.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># iterate over all components that match the given category.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Displaying specific components - SCM ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">component</span> <span class=\"ow\">in</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">GetComponents</span><span class=\"p\">(</span><span class=\"s1\">&#39;SCM&#39;</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># iterate over all components that match the given category.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Displaying specific components - LPM ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">component</span> <span class=\"ow\">in</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">GetComponents</span><span class=\"p\">(</span><span class=\"s1\">&#39;LPM&#39;</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># iterate over all components that match the given category.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Displaying specific components - LPMBL ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">component</span> <span class=\"ow\">in</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">GetComponents</span><span class=\"p\">(</span><span class=\"s1\">&#39;LPMBL&#39;</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># iterate over all components that match the given category.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Displaying specific components - BASS ...&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">component</span> <span class=\"ow\">in</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">GetComponents</span><span class=\"p\">(</span><span class=\"s1\">&#39;BASS&#39;</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># dump the webapi list of uri&#39;s this device supports.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Supported URI&#39;s for device &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;:&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">DeviceName</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">SupportedUris</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;- </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)))</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;** Exception: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p></details></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">connectTimeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">proxyManager</span><span class=\"p\">:</span> <span class=\"n\">urllib3</span><span class=\"o\">.</span><span class=\"n\">poolmanager</span><span class=\"o\">.</span><span class=\"n\">ProxyManager</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8090</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.Components", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.Components", "kind": "variable", "doc": "<p>A list of <code>SoundTouchDeviceComponent</code> objects containing various information about the \ndevice's components (e.g. SCM, LPM, BASS, etc).</p>\n", "annotation": ": list"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.CountryCode", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.CountryCode", "kind": "variable", "doc": "<p>The country code of the device as assigned by the manufacturer (e.g. 'US', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.DeviceId", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.DeviceId", "kind": "variable", "doc": "<p>The unique device identifier as assigned by the manufacturer (e.g. '9070658C9D4A', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.DeviceName", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.DeviceName", "kind": "variable", "doc": "<p>The friendly name assigned to the SoundTouch device (e.g. 'Home Theater SoundBar', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.DeviceType", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.DeviceType", "kind": "variable", "doc": "<p>The type of device as assigned by the manufacturer (e.g. 'SoundTouch 10', 'SoundTouch 300', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.Host", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.Host", "kind": "variable", "doc": "<p>An Ipv4 address of the SoundTouch device. \nThis property is read-only, and supplied by the class constructor.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.LogReadUrl", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.LogReadUrl", "kind": "variable", "doc": "<p>The URL to download a logread file from this device.</p>\n\n<p>The format of the returned url is: <br />\n<code>http://{Host}:8091/logread.dat</code></p>\n\n<p>Example with Host = '192.168.1.131': <br />\n<code>http://192.168.1.131/logread.dat</code></p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.MacAddress", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.MacAddress", "kind": "variable", "doc": "<p>The MAC address (media access control address) assigned to the device.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.ModuleType", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.ModuleType", "kind": "variable", "doc": "<p>The Radio module type used in the device, as assigned by the manufacturer (e.g. 'SM2', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.NetworkInfo", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.NetworkInfo", "kind": "variable", "doc": "<p>A list of SoundTouchNetworkConfig objects containing the current network configuration \nof the device.</p>\n", "annotation": ": list"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.Port", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.Port", "kind": "variable", "doc": "<p>An Ipv4 address of the SoundTouch device. \nThis property is read-only, and supplied by the class constructor.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.RegionCode", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.RegionCode", "kind": "variable", "doc": "<p>The region code of the device as assigned by the manufacturer (e.g. 'US', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.StreamingAccountUUID", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.StreamingAccountUUID", "kind": "variable", "doc": "<p>Bose Streaming account UUID, as assigned by the manufacturer (e.g. '6146078', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.StreamingUrl", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.StreamingUrl", "kind": "variable", "doc": "<p>Bose Streaming URL, as assigned by the manufacturer (e.g. 'https://streaming.bose.com', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.SupportedUris", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.SupportedUris", "kind": "variable", "doc": "<p>A list of SoundTouchUri objects that the device supports.</p>\n\n<p>These URI's are used by the SoundTouchClient class to obtain information from the \ndevice (e.g. info, nowPlaying, etc).</p>\n", "annotation": ": list"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.PtsUrl", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.PtsUrl", "kind": "variable", "doc": "<p>The URL to download a logread file.</p>\n\n<p>The format of the returned url is: <br />\nhttp://{Host}:8091/pts.dat</p>\n\n<p>Example with Host = '192.168.1.131': <br />\n<code>http://192.168.1.131/pts.dat</code></p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.UpnpUrl", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.UpnpUrl", "kind": "variable", "doc": "<p>The Universal Plug and Play (UPnP) root URL for this device.</p>\n\n<p>The document located at the returned URL contains additional information about\nmethods and properties that can be used with UPnP.</p>\n\n<p>The format of the returned url is: <br />\n<code>http://{Host}:8091/XD/BO5EBO5E-F00D-F00D-FEED-{DeviceId}.xml</code></p>\n\n<p>Example with Host = '192.168.1.131', DeviceId = 'E8EB11B9B723': <br />\n'http://192.168.1.130:8091/XD/BO5EBO5E-F00D-F00D-FEED-E8EB11B9B723.xml'</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.Variant", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.Variant", "kind": "variable", "doc": "<p>The variant node value (e.g. 'ginger', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.VariantMode", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.VariantMode", "kind": "variable", "doc": "<p>The variant node value (e.g. 'noap', etc).</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.GetComponents", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.GetComponents", "kind": "function", "doc": "<p>Iterates over all components discovered at class initialization that match \nthe given category.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>componentCategory (str):</strong>  The  component's category</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An iterator over the filtered <code>SoundTouchDeviceComponent</code> components.</p>\n</blockquote>\n\n<p>This yields a device component for the given category.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">componentCategory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">soundtouchdevicecomponent</span><span class=\"o\">.</span><span class=\"n\">SoundTouchDeviceComponent</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchdevice.SoundTouchDevice.ToString", "modulename": "bosesoundtouchapi.soundtouchdevice", "qualname": "SoundTouchDevice.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>includeItems (bool):</strong>  True to include all items in the list; otherwise False to only\ninclude the base list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">includeItems</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchdevicecomponent", "modulename": "bosesoundtouchapi.soundtouchdevicecomponent", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchdevicecomponent.SoundTouchDeviceComponent", "modulename": "bosesoundtouchapi.soundtouchdevicecomponent", "qualname": "SoundTouchDeviceComponent", "kind": "class", "doc": "<p>A small wrapper class to store component related data.</p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchdevicecomponent.SoundTouchDeviceComponent.__init__", "modulename": "bosesoundtouchapi.soundtouchdevicecomponent", "qualname": "SoundTouchDeviceComponent.__init__", "kind": "function", "doc": "<p>Initiallizes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>category (str):</strong>  A simple string used to identify the component object.</li>\n<li><strong>softwareVersion (str):</strong>  If present, this attribute contains the current version the software\nis running with.</li>\n<li><strong>serialNumber (str):</strong>  This string contains a serial number, if present.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">softwareVersion</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">serialNumber</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.soundtouchdevicecomponent.SoundTouchDeviceComponent.Category", "modulename": "bosesoundtouchapi.soundtouchdevicecomponent", "qualname": "SoundTouchDeviceComponent.Category", "kind": "variable", "doc": "<p>A simple string used to identify the component object.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevicecomponent.SoundTouchDeviceComponent.SerialNumber", "modulename": "bosesoundtouchapi.soundtouchdevicecomponent", "qualname": "SoundTouchDeviceComponent.SerialNumber", "kind": "variable", "doc": "<p>If present, this attribute contains the current version the software is \nrunning with.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevicecomponent.SoundTouchDeviceComponent.SoftwareVersion", "modulename": "bosesoundtouchapi.soundtouchdevicecomponent", "qualname": "SoundTouchDeviceComponent.SoftwareVersion", "kind": "variable", "doc": "<p>This string contains a serial number, if present.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchdevicecomponent.SoundTouchDeviceComponent.ToString", "modulename": "bosesoundtouchapi.soundtouchdevicecomponent", "qualname": "SoundTouchDeviceComponent.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtoucherror", "modulename": "bosesoundtouchapi.soundtoucherror", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtoucherror.SoundTouchError", "modulename": "bosesoundtouchapi.soundtoucherror", "qualname": "SoundTouchError", "kind": "class", "doc": "<p>Exception thrown when a SoundTouch device returns an error status for a command.</p>\n", "bases": "builtins.Exception"}, {"fullname": "bosesoundtouchapi.soundtoucherror.SoundTouchError.__init__", "modulename": "bosesoundtouchapi.soundtoucherror", "qualname": "SoundTouchError.__init__", "kind": "function", "doc": "<p>Initializes a new class instance using specified message text.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (str):</strong>  Message text, as reported by the element text of the error xml response.</li>\n<li><strong>name (str):</strong>  Name value, as reported by the \"name\" attribute of the error xml response.</li>\n<li><strong>severity (str):</strong>  Severity value, as reported by the \"severity\" attribute of the error xml response.</li>\n<li><strong>errorCode (int):</strong>  Error code value, as reported by the \"value\" attribute of the error xml response.</li>\n<li><strong>logsi (SISession):</strong>  Trace session object that this exception will be logged to, or null to bypass trace logging. <br />\nDefault is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">severity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">errorCode</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">logsi</span><span class=\"p\">:</span> <span class=\"n\">smartinspectpython</span><span class=\"o\">.</span><span class=\"n\">sisession</span><span class=\"o\">.</span><span class=\"n\">SISession</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.soundtoucherror.SoundTouchError.ErrorCode", "modulename": "bosesoundtouchapi.soundtoucherror", "qualname": "SoundTouchError.ErrorCode", "kind": "variable", "doc": "<p>Error code value, as reported by the \"value\" attribute of the error xml response.</p>\n\n<p>Examples: \"401\", \"415\", etc.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.soundtoucherror.SoundTouchError.Message", "modulename": "bosesoundtouchapi.soundtoucherror", "qualname": "SoundTouchError.Message", "kind": "variable", "doc": "<p>Message text, as reported by the element text of the error xml response.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtoucherror.SoundTouchError.Name", "modulename": "bosesoundtouchapi.soundtoucherror", "qualname": "SoundTouchError.Name", "kind": "variable", "doc": "<p>Name value, as reported by the \"name\" attribute of the error xml response.</p>\n\n<p>Examples: \"HTTP_STATUS_UNAUTHORIZED\", \"HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE\", etc.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtoucherror.SoundTouchError.Severity", "modulename": "bosesoundtouchapi.soundtoucherror", "qualname": "SoundTouchError.Severity", "kind": "variable", "doc": "<p>Severity value, as reported by the \"severity\" attribute of the error xml response.</p>\n\n<p>Examples: \"Unknown\"</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtoucherror.SoundTouchError.ToString", "modulename": "bosesoundtouchapi.soundtoucherror", "qualname": "SoundTouchError.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchexception", "modulename": "bosesoundtouchapi.soundtouchexception", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchexception.SoundTouchException", "modulename": "bosesoundtouchapi.soundtouchexception", "qualname": "SoundTouchException", "kind": "class", "doc": "<p>Exception thrown if a non-fatal application error occurs.</p>\n", "bases": "builtins.Exception"}, {"fullname": "bosesoundtouchapi.soundtouchexception.SoundTouchException.__init__", "modulename": "bosesoundtouchapi.soundtouchexception", "qualname": "SoundTouchException.__init__", "kind": "function", "doc": "<p>Initializes a new class instance using specified message text.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (str):</strong>  Exception message text.</li>\n<li><strong>innerException (Exception):</strong>  If specified, the exception that caused this exception. <br />\nDefault is None.</li>\n<li><strong>logsi (SISession):</strong>  Trace session object that this exception will be logged to, or null to bypass trace logging. <br />\nDefault is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">innerException</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logsi</span><span class=\"p\">:</span> <span class=\"n\">smartinspectpython</span><span class=\"o\">.</span><span class=\"n\">sisession</span><span class=\"o\">.</span><span class=\"n\">SISession</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.soundtouchexception.SoundTouchException.InnerException", "modulename": "bosesoundtouchapi.soundtouchexception", "qualname": "SoundTouchException.InnerException", "kind": "variable", "doc": "<p>If specified, the exception that caused this exception. <br />\nDefault is None.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The InnerException property value.</p>\n</blockquote>\n", "annotation": ": Exception"}, {"fullname": "bosesoundtouchapi.soundtouchexception.SoundTouchException.Message", "modulename": "bosesoundtouchapi.soundtouchexception", "qualname": "SoundTouchException.Message", "kind": "variable", "doc": "<p>Exception message text.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The Message property value.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchexception.SoundTouchException.MessageId", "modulename": "bosesoundtouchapi.soundtouchexception", "qualname": "SoundTouchException.MessageId", "kind": "variable", "doc": "<p>Exception message identifier.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The Message property value.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchkeys", "modulename": "bosesoundtouchapi.soundtouchkeys", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys", "kind": "class", "doc": "<p>SoundTouch Keys enumeration.</p>\n\n<p>All usable keys that can be 'pressed' on a SoundTouch device.</p>\n", "bases": "enum.Enum"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.ADD_FAVORITE", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.ADD_FAVORITE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.ADD_FAVORITE: &#x27;ADD_FAVORITE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.AUX_INPUT", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.AUX_INPUT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.AUX_INPUT: &#x27;AUX_INPUT&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.BOOKMARK", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.BOOKMARK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.BOOKMARK: &#x27;BOOKMARK&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.MUTE", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.MUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.MUTE: &#x27;MUTE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.NEXT_TRACK", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.NEXT_TRACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.NEXT_TRACK: &#x27;NEXT_TRACK&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PAUSE", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PAUSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PAUSE: &#x27;PAUSE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PLAY", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PLAY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PLAY: &#x27;PLAY&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PLAY_PAUSE", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PLAY_PAUSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PLAY_PAUSE: &#x27;PLAY_PAUSE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.POWER", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.POWER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.POWER: &#x27;POWER&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PRESET_1", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PRESET_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PRESET_1: &#x27;PRESET_1&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PRESET_2", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PRESET_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PRESET_2: &#x27;PRESET_2&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PRESET_3", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PRESET_3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PRESET_3: &#x27;PRESET_3&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PRESET_4", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PRESET_4", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PRESET_4: &#x27;PRESET_4&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PRESET_5", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PRESET_5", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PRESET_5: &#x27;PRESET_5&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PRESET_6", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PRESET_6", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PRESET_6: &#x27;PRESET_6&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.PREV_TRACK", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.PREV_TRACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.PREV_TRACK: &#x27;PREV_TRACK&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.REMOVE_FAVORITE", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.REMOVE_FAVORITE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.REMOVE_FAVORITE: &#x27;REMOVE_FAVORITE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.REPEAT_ALL", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.REPEAT_ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.REPEAT_ALL: &#x27;REPEAT_ALL&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.REPEAT_OFF", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.REPEAT_OFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.REPEAT_OFF: &#x27;REPEAT_OFF&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.REPEAT_ONE", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.REPEAT_ONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.REPEAT_ONE: &#x27;REPEAT_ONE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.SHUFFLE_OFF", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.SHUFFLE_OFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.SHUFFLE_OFF: &#x27;SHUFFLE_OFF&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.SHUFFLE_ON", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.SHUFFLE_ON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.SHUFFLE_ON: &#x27;SHUFFLE_ON&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.STOP", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.STOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.STOP: &#x27;STOP&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.THUMBS_DOWN", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.THUMBS_DOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.THUMBS_DOWN: &#x27;THUMBS_DOWN&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.THUMBS_UP", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.THUMBS_UP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.THUMBS_UP: &#x27;THUMBS_UP&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.VOLUME_DOWN", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.VOLUME_DOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.VOLUME_DOWN: &#x27;VOLUME_DOWN&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchkeys.SoundTouchKeys.VOLUME_UP", "modulename": "bosesoundtouchapi.soundtouchkeys", "qualname": "SoundTouchKeys.VOLUME_UP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchKeys.VOLUME_UP: &#x27;VOLUME_UP&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchmessage", "modulename": "bosesoundtouchapi.soundtouchmessage", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchmessage.SoundTouchMessage", "modulename": "bosesoundtouchapi.soundtouchmessage", "qualname": "SoundTouchMessage", "kind": "class", "doc": "<p>A class representing an exchange object.</p>\n\n<p>In order to exchange data between a client and the device, this class\ntype is used. It stores the request text/uri and the response as an XML-\nElement.</p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchmessage.SoundTouchMessage.__init__", "modulename": "bosesoundtouchapi.soundtouchmessage", "qualname": "SoundTouchMessage.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>uri (SoundTouchUri):</strong>  The target uri which should be queried.</li>\n<li><strong>xmlMessage (str):</strong>  If a key should be pressed or new data should be saved on the target\ndevice, an xml formatted string is needed.</li>\n<li><strong>response (xml.etree.ElementTree.Element):</strong>  The response object as an XML-Element.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">bosesoundtouchapi</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">soundtouchuri</span><span class=\"o\">.</span><span class=\"n\">SoundTouchUri</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xmlMessage</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.soundtouchmessage.SoundTouchMessage.HasXmlMessage", "modulename": "bosesoundtouchapi.soundtouchmessage", "qualname": "SoundTouchMessage.HasXmlMessage", "kind": "variable", "doc": "<p>Returns True if an xml message was returned with the response; otherwise, False.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.soundtouchmessage.SoundTouchMessage.IsSimpleResponse", "modulename": "bosesoundtouchapi.soundtouchmessage", "qualname": "SoundTouchMessage.IsSimpleResponse", "kind": "variable", "doc": "<p>Returns True if the response is a simple pass / fail response; otherwise, False\nif the response requires further processing.</p>\n", "annotation": ": bool"}, {"fullname": "bosesoundtouchapi.soundtouchmessage.SoundTouchMessage.Response", "modulename": "bosesoundtouchapi.soundtouchmessage", "qualname": "SoundTouchMessage.Response", "kind": "variable", "doc": "<p>Returns the device response as an xml.etree.ElementTree.Element object.</p>\n", "annotation": ": xml.etree.ElementTree.Element"}, {"fullname": "bosesoundtouchapi.soundtouchmessage.SoundTouchMessage.Uri", "modulename": "bosesoundtouchapi.soundtouchmessage", "qualname": "SoundTouchMessage.Uri", "kind": "variable", "doc": "<p>The SoundTouchUri object used to make the request.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchmessage.SoundTouchMessage.XmlMessage", "modulename": "bosesoundtouchapi.soundtouchmessage", "qualname": "SoundTouchMessage.XmlMessage", "kind": "variable", "doc": "<p>The returned xml formatted message string.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchmessage.SoundTouchMessage.ToString", "modulename": "bosesoundtouchapi.soundtouchmessage", "qualname": "SoundTouchMessage.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchmodelrequest", "modulename": "bosesoundtouchapi.soundtouchmodelrequest", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchmodelrequest.SoundTouchModelRequest", "modulename": "bosesoundtouchapi.soundtouchmodelrequest", "qualname": "SoundTouchModelRequest", "kind": "class", "doc": "<p>A class representing a model that can issue a POST request with an\nxml payload that gets placed in the request body.</p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchmodelrequest.SoundTouchModelRequest.__init__", "modulename": "bosesoundtouchapi.soundtouchmodelrequest", "qualname": "SoundTouchModelRequest.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "bosesoundtouchapi.soundtouchmodelrequest.SoundTouchModelRequest.ToXmlRequestBody", "modulename": "bosesoundtouchapi.soundtouchmodelrequest", "qualname": "SoundTouchModelRequest.ToXmlRequestBody", "kind": "function", "doc": "<p>Returns a POST request body for updating a configuration.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An xml string that can be used in a POST request to update a\n  device configuration.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys", "kind": "class", "doc": "<p>This class contains all event type categories that are generated by the SoundTouch \ndevice event notification system when an event is processed.</p>\n\n<p>These constants can be used when adding and removing event listeners in the\nbosesoundtouchapi.ws.soundtouchwebsocket.SoundTouchWebSocket class.</p>\n", "bases": "enum.Enum"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.ALL", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.ALL: &#x27;*&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.connectionStateUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.connectionStateUpdated", "kind": "variable", "doc": "<p>Occurs when a network connection state has changed.  This normally happens when the device\nsenses a wifi signal change (e.g. signal strength goes from poor to excellent, etc).</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.connectionStateUpdated: &#x27;connectionStateUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.criticalErrorUpdate", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.criticalErrorUpdate", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.criticalErrorUpdate: &#x27;criticalErrorUpdate&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.errorNotification", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.errorNotification", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.errorNotification: &#x27;errorNotification&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.errorUpdate", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.errorUpdate", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.errorUpdate: &#x27;errorUpdate&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.groupUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.groupUpdated", "kind": "variable", "doc": "<p>Occurs when a group has been modified (created, member added, member removed, etc) on the device.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.groupUpdated: &#x27;groupUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.infoUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.infoUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.infoUpdated: &#x27;infoUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.languageUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.languageUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.languageUpdated: &#x27;languageUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.LowPowerStandbyUpdate", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.LowPowerStandbyUpdate", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.LowPowerStandbyUpdate: &#x27;LowPowerStandbyUpdate&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.nameUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.nameUpdated", "kind": "variable", "doc": "<p>Occurs when the device name has been updated.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.nameUpdated: &#x27;nameUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.nowPlayingUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.nowPlayingUpdated", "kind": "variable", "doc": "<p>Occurs when the currently playing media source has changed.\nSome examples of this event are:  </p>\n\n<ul>\n<li>when listening to a radio station / airplay / bluetooth, and the next song comes on.</li>\n<li>when the device is powered down into STANDBY state.</li>\n</ul>\n", "default_value": "&lt;SoundTouchNotifyCategorys.nowPlayingUpdated: &#x27;nowPlayingUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.nowSelectionUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.nowSelectionUpdated", "kind": "variable", "doc": "<p>Occurs when the source selection has changed (e.g. switch from AirPlay to BlueTooth), as \nwell as when the device is powered on / off.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.nowSelectionUpdated: &#x27;nowSelectionUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.presetsUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.presetsUpdated", "kind": "variable", "doc": "<p>Occurs when a preset has been updated, added, or removed from the device.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.presetsUpdated: &#x27;presetsUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.recentsUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.recentsUpdated", "kind": "variable", "doc": "<p>Occurs when a recently played item has been updated, added, or removed from the device.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.recentsUpdated: &#x27;recentsUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.soundTouchConfigurationUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.soundTouchConfigurationUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.soundTouchConfigurationUpdated: &#x27;soundTouchConfigurationUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.SoundTouchSdkInfo", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.SoundTouchSdkInfo", "kind": "variable", "doc": "<p>Server version and build information. \nIt occurs when the initial connection to the SoundTouch device notification server is made.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.SoundTouchSdkInfo: &#x27;SoundTouchSdkInfo&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.sourcesUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.sourcesUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.sourcesUpdated: &#x27;sourcesUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.swUpdateStatusUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.swUpdateStatusUpdated", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.swUpdateStatusUpdated: &#x27;swUpdateStatusUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.userActivityUpdate", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.userActivityUpdate", "kind": "variable", "doc": "<p>Occurs when a user has manually sent the device a request; some examples of this are:  </p>\n\n<ul>\n<li>a button is pressed on the devices' physical remote control.  </li>\n<li>the volume down / up button was pressed on the physical device.</li>\n</ul>\n", "default_value": "&lt;SoundTouchNotifyCategorys.userActivityUpdate: &#x27;userActivityUpdate&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.volumeUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.volumeUpdated", "kind": "variable", "doc": "<p>Occurs when the device volume level has been changed.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.volumeUpdated: &#x27;volumeUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.WebSocketClose", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.WebSocketClose", "kind": "variable", "doc": "<p>Occurs when a websocket close is encountered (e.g. ConnectionResetError, etc).  This can occur\nwhen the SoundTouch device is powered off after a connection was been made to it via a websocket.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.WebSocketClose: &#x27;WebSocketClose&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.WebSocketError", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.WebSocketError", "kind": "variable", "doc": "<p>Occurs when a websocket error is encountered (e.g. ConnectionResetError, etc).  This can occur\nwhen the SoundTouch device is powered off after a connection was been made to it via a websocket.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.WebSocketError: &#x27;WebSocketError&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.zoneUpdated", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.zoneUpdated", "kind": "variable", "doc": "<p>Occurs when a zone has been modified (created, member added, member removed, etc) on the device.</p>\n", "default_value": "&lt;SoundTouchNotifyCategorys.zoneUpdated: &#x27;zoneUpdated&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchnotifycategorys.SoundTouchNotifyCategorys.toString", "modulename": "bosesoundtouchapi.soundtouchnotifycategorys", "qualname": "SoundTouchNotifyCategorys.toString", "kind": "function", "doc": "<p>Returns the enum.value (instead of classname.value) as a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">category</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "bosesoundtouchapi.soundtouchsources", "modulename": "bosesoundtouchapi.soundtouchsources", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources", "kind": "class", "doc": "<p>Defines the Source of a ContentItem.</p>\n", "bases": "enum.Enum"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.DEFAULT", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.DEFAULT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.DEFAULT: &#x27;INVALID_SOURCE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.AIRPLAY", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.AIRPLAY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.AIRPLAY: &#x27;AIRPLAY&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.AMAZON", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.AMAZON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.AMAZON: &#x27;AMAZON&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.AUX", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.AUX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.AUX: &#x27;AUX&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.BLUETOOTH", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.BLUETOOTH", "kind": "variable", "doc": "<p>Content will be played over a Bluetooth connection.</p>\n", "default_value": "&lt;SoundTouchSources.BLUETOOTH: &#x27;BLUETOOTH&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.DEEZER", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.DEEZER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.DEEZER: &#x27;DEEZER&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.IHEART", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.IHEART", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.IHEART: &#x27;IHEART&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.INTERNET_RADIO", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.INTERNET_RADIO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.INTERNET_RADIO: &#x27;INTERNET_RADIO&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.INVALID", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.INVALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.DEFAULT: &#x27;INVALID_SOURCE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.LOCAL_MUSIC", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.LOCAL_MUSIC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.LOCAL_MUSIC: &#x27;LOCAL_MUSIC&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.NOTIFICATION", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.NOTIFICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.NOTIFICATION: &#x27;NOTIFICATION&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.PANDORA", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.PANDORA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.PANDORA: &#x27;PANDORA&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.PRODUCT", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.PRODUCT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.PRODUCT: &#x27;PRODUCT&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.QPLAY", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.QPLAY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.QPLAY: &#x27;QPLAY&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.SIRIUSXM", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.SIRIUSXM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.SIRIUSXM: &#x27;SIRIUSXM&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.SPOTIFY", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.SPOTIFY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.SPOTIFY: &#x27;SPOTIFY&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.STANDBY", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.STANDBY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.STANDBY: &#x27;STANDBY&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.STORED_MUSIC", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.STORED_MUSIC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.STORED_MUSIC: &#x27;STORED_MUSIC&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchsources.SoundTouchSources.UPDATE", "modulename": "bosesoundtouchapi.soundtouchsources", "qualname": "SoundTouchSources.UPDATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SoundTouchSources.UPDATE: &#x27;UPDATE&#x27;&gt;"}, {"fullname": "bosesoundtouchapi.soundtouchwarning", "modulename": "bosesoundtouchapi.soundtouchwarning", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bosesoundtouchapi.soundtouchwarning.SoundTouchWarning", "modulename": "bosesoundtouchapi.soundtouchwarning", "qualname": "SoundTouchWarning", "kind": "class", "doc": "<p>Exception thrown when a SoundTouch device returns a warning status.</p>\n", "bases": "builtins.Exception"}, {"fullname": "bosesoundtouchapi.soundtouchwarning.SoundTouchWarning.__init__", "modulename": "bosesoundtouchapi.soundtouchwarning", "qualname": "SoundTouchWarning.__init__", "kind": "function", "doc": "<p>Initializes a new class instance using specified message text.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (str):</strong>  Warning message text.</li>\n<li><strong>warningCode (int):</strong>  Warning code value, that can uniquely identify this message.</li>\n<li><strong>logsi (SISession):</strong>  Trace session object that this exception will be logged to, or null to bypass trace logging. <br />\nDefault is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">warningCode</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">logsi</span><span class=\"p\">:</span> <span class=\"n\">smartinspectpython</span><span class=\"o\">.</span><span class=\"n\">sisession</span><span class=\"o\">.</span><span class=\"n\">SISession</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "bosesoundtouchapi.soundtouchwarning.SoundTouchWarning.Message", "modulename": "bosesoundtouchapi.soundtouchwarning", "qualname": "SoundTouchWarning.Message", "kind": "variable", "doc": "<p>Warning message text.</p>\n", "annotation": ": str"}, {"fullname": "bosesoundtouchapi.soundtouchwarning.SoundTouchWarning.WarningCode", "modulename": "bosesoundtouchapi.soundtouchwarning", "qualname": "SoundTouchWarning.WarningCode", "kind": "variable", "doc": "<p>Warning code value, that can uniquely identify this message.</p>\n", "annotation": ": int"}, {"fullname": "bosesoundtouchapi.soundtouchwarning.SoundTouchWarning.ToString", "modulename": "bosesoundtouchapi.soundtouchwarning", "qualname": "SoundTouchWarning.ToString", "kind": "function", "doc": "<p>Returns a displayable string representation of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();